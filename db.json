{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/urls.txt","path":"urls.txt","modified":1,"renderable":0},{"_id":"source/wechat.png","path":"wechat.png","modified":1,"renderable":0},{"_id":"source/head.png","path":"head.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1abaecd5d9b837030e950851749357f1e38bd7fa","modified":1487668394000},{"_id":"source/favicon.ico","hash":"7b097a48b25dc3527e65b01a6ca3dc8626e128ac","modified":1483176599000},{"_id":"source/urls.txt","hash":"464c1582d5c3c6af83584d2add8c3ba6082c108b","modified":1483176599000},{"_id":"themes/next/.gitignore","hash":"43da4ba43fa7a2bca24aabf8f4ab18811bd0042b","modified":1483409129000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1483188239000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1483188239000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1483188239000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1483188239000},{"_id":"themes/next/_config.yml","hash":"65d6b3b8b84c7fa62ac6714b0a3ae5d769c6b477","modified":1483197545000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1483188239000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1483188239000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1483188239000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1483188239000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1483188239000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1483188239000},{"_id":"source/_posts/Java8实战读书笔记.md","hash":"3157b688e6fea23c3daafc736b7738605b6fd6fe","modified":1487668532000},{"_id":"source/_posts/Docker学习.md","hash":"38bd25420116f4be5ee18b01862e8fdeebc3fdde","modified":1483433229000},{"_id":"source/_posts/java8-time.md","hash":"1139c8ecf09ecf3030e16400d4ec8283cb9892df","modified":1487668287000},{"_id":"source/_posts/hexo-optimization.md","hash":"d37713293e4ba529abcd16e1ad48fea651fbdba9","modified":1483176599000},{"_id":"source/_posts/first.md","hash":"c75e11c4a7bb252f008f8a732cd0e2804eaffaab","modified":1483176599000},{"_id":"source/_posts/https.md","hash":"c19ca98dcb07b8bb25da7e5aa0b0f15990e38f6a","modified":1483205184000},{"_id":"source/about/index.md","hash":"5037fc0216dd002fe486cb8b2f82b2494556c596","modified":1483176599000},{"_id":"source/categories/index.md","hash":"57d7d800a05375e55dbf4cca662f41dad18aa982","modified":1483176599000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1483188239000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1483188239000},{"_id":"source/tags/index.md","hash":"8b2acfaff1e99e0b3e452865264f04fadcdf599b","modified":1483176599000},{"_id":"themes/next/.git/index","hash":"935d5126bdcc578609e5ea0a6005e0be5c1847dd","modified":1483409135000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1483188144000},{"_id":"themes/next/.git/packed-refs","hash":"0ff705f5f080495f8b0effec1e4ba3e766012b15","modified":1483188239000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1483188239000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1483188239000},{"_id":"source/wechat.png","hash":"d7e56c80486c115a92cad915ca9c35a7dbf45c35","modified":1483176599000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1483188239000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1483188239000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1483188239000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1483188239000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1483188239000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1483188239000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1483188239000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1483188239000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1483188239000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1483188239000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1483188239000},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1483188239000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1483188239000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1483188239000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1483188239000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1483188239000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1483188239000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1483188239000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1483188239000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1483188239000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1483188239000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1483188239000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1483188239000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1483188239000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1483188239000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483188239000},{"_id":"source/head.png","hash":"cc3e0b598c244ca48f4a343540545c3fdb0b240f","modified":1483176599000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1483188144000},{"_id":"themes/next/.git/logs/HEAD","hash":"0d9b4f6b07345b1d29770e6c3c8e11ecd862750e","modified":1483188239000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1483188144000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1483188144000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1483188144000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1483188144000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1483188144000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1483188144000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1483188144000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1483188144000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1483188144000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1483188144000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1483188239000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1483188239000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1483188239000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1483188239000},{"_id":"themes/next/layout/_macro/post.swig","hash":"39a8efd961ea2c5758ca4231d3cc4108c1856930","modified":1483188239000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1483188239000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1483188239000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4eb278f7b1b7dfe1088c2b411778cc6129df82bb","modified":1483188239000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1483188239000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1483188239000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1483188239000},{"_id":"themes/next/layout/_partials/header.swig","hash":"5696ee15fc21eb3a6416902afcf1df454497c552","modified":1483188239000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1483188239000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1483188239000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1483188239000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1483188239000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1483188239000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1483188239000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1483188239000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1483188239000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1483188239000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1483188239000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1483188239000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1483188239000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1483188239000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1483188239000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1483188239000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1483188239000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1483188239000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1483188239000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1483188239000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1483188239000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1483188239000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483188239000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483188239000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1483188239000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1483188239000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1483188239000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483188239000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483188239000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483188239000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483188239000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483188239000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483188239000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1483188239000},{"_id":"themes/next/.git/refs/heads/master","hash":"af778086de84b45cba893f59f046b25a692c10db","modified":1483188239000},{"_id":"themes/next/.git/objects/da/6ec64467c33961aae947f2db4d3bbf3bc3b385","hash":"8d4db3f4bdfece3c57beea83b8fce4ad9297f72b","modified":1483409135000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1483188239000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1483188239000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1483188239000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1483188239000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1483188239000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1483188239000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1483188239000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1483188239000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1483188239000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1483188239000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1483188239000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1483188239000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"417e16a0fbdcb1b87987787bd7f9fa17eefc2d2b","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1483188239000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1483188239000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1483188239000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1483188239000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1483188239000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bef514826ebf9eb6e99bb2b0d72285106658a1ec","modified":1483188239000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1483188239000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1483188239000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1483188239000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1483188239000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1483188239000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1483188239000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1483188239000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1483188239000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1483188239000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1483188239000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1483188239000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1483188239000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1483188239000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1483188239000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1483188239000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1483188239000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1483188239000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1483188239000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1483188239000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1483188239000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1483188239000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1483188239000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1483188239000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1483188239000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1483188239000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1483188239000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1483188239000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0d9b4f6b07345b1d29770e6c3c8e11ecd862750e","modified":1483188239000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1483188239000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1483188239000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1483188239000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1483188239000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1483188239000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1483188239000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1483188239000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7e899c4c0aa1312666f2534a4700667d1bfd88da","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1483188239000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1483188239000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1483188239000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1483188239000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1483188239000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1483188239000},{"_id":"themes/next/.git/objects/pack/pack-a8614c4a09dcdf98c793271ea9b27bc080d433d8.idx","hash":"14b6fc2095f0fb9cc14665a1ff270ca8385778fa","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1483188239000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1483188239000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0d9b4f6b07345b1d29770e6c3c8e11ecd862750e","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1483188239000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1483188239000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1483188239000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1483188239000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1483188239000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1483188239000},{"_id":"themes/next/.git/objects/pack/pack-a8614c4a09dcdf98c793271ea9b27bc080d433d8.pack","hash":"c6e94158d5b2abc10aa1d28d8fe88375ba1d8b35","modified":1483188239000},{"_id":"public/about/index.html","hash":"7ae8e5e5fd702dc6d9b2de64af6046886124c0cf","modified":1487668628377},{"_id":"public/categories/index.html","hash":"48d9b9165a2b2a144aad1851291a3841a63ec059","modified":1487668628377},{"_id":"public/tags/index.html","hash":"fecf28603234ac36fd171a673b750b42ad64df8b","modified":1487668628377},{"_id":"public/20161016/first/index.html","hash":"964d7f8b2ef1f9f30aac134ba29a7ec0e59c9565","modified":1487668628377},{"_id":"public/archives/index.html","hash":"95bdc4f890eb9accda855994cb4051d73f527103","modified":1487668628377},{"_id":"public/archives/2016/index.html","hash":"27f2680ddd1e0114d39bcf9acaaf6954a7718896","modified":1487668628377},{"_id":"public/archives/2016/10/index.html","hash":"cf6ee44b4870abb67d1d09b94f70e6284c96c06f","modified":1487668628377},{"_id":"public/archives/2017/index.html","hash":"3c84ab6304c7f013a1e5142c2ba57e22d144b1b0","modified":1487668628377},{"_id":"public/archives/2017/01/index.html","hash":"9fbdcdfd2d0743c1dbfa67ba4eda5635cdac8abb","modified":1487668628377},{"_id":"public/archives/2017/02/index.html","hash":"e4ef424fe9870f3af811caa4555e57c70fd60628","modified":1487668628377},{"_id":"public/categories/Java/index.html","hash":"570d59dbc210e28c6d49b34c8de94c81508ac0e2","modified":1487668628378},{"_id":"public/categories/docker/index.html","hash":"a34cef27de452b518bd61b953fc3195caa021ae8","modified":1487668628378},{"_id":"public/categories/杂谈/index.html","hash":"91bad7e4eeb16199211bfdbd0145592560105383","modified":1487668628378},{"_id":"public/categories/Nginx/index.html","hash":"fb9f8274f30eb976d3bba72e925c30e66f0ee306","modified":1487668628378},{"_id":"public/tags/Java/index.html","hash":"6145d12eb87c5cb1d64760d3de74f236660e60c8","modified":1487668628378},{"_id":"public/tags/docker/index.html","hash":"2a4e983f0575f2deeba6f4026bad830a624bf56a","modified":1487668628378},{"_id":"public/tags/hexo/index.html","hash":"a43486ec9d39aca2e3d7bc5afa5832ca9604a9f0","modified":1487668628378},{"_id":"public/tags/https/index.html","hash":"a2a511a2c9793a55582cc7ace74b5e9a72ed109d","modified":1487668628378},{"_id":"public/20170221/Java8实战读书笔记/index.html","hash":"1ca47944620e3b57c57b6842d1754d2a1acf6fce","modified":1487668628378},{"_id":"public/20170101/Docker学习/index.html","hash":"03e5b7124404d45fd53a4af4c6a8683c11418c07","modified":1487668628378},{"_id":"public/20170101/https/index.html","hash":"498f5ad40e3f6954ccd98953d998fff679b1c04c","modified":1487668628378},{"_id":"public/20161018/java8-time/index.html","hash":"68eb3434d33a008c96d3cff76d5a6d3a9fd1644e","modified":1487668628378},{"_id":"public/20161017/hexo-optimization/index.html","hash":"93ce1d22a303e2ced99ee2bc6c9e9a3b689621ad","modified":1487668628378},{"_id":"public/index.html","hash":"30dec583dc7d511c252651ba3f58ed142e09876f","modified":1487668628378},{"_id":"public/favicon.ico","hash":"7b097a48b25dc3527e65b01a6ca3dc8626e128ac","modified":1487668628392},{"_id":"public/urls.txt","hash":"464c1582d5c3c6af83584d2add8c3ba6082c108b","modified":1487668628392},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1487668628392},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487668628392},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487668628392},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487668628392},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487668628392},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487668628392},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487668628392},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487668628392},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487668628392},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487668628392},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487668628392},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1487668628392},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1487668628392},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487668628392},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1487668628392},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1487668628392},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487668628392},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487668628392},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487668628393},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487668628393},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487668628393},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487668628393},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1487668628393},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487668628393},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1487668629078},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1487668629084},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1487668629087},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1487668629087},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1487668629092},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1487668629092},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1487668629092},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1487668629092},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1487668629092},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1487668629092},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1487668629092},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1487668629092},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1487668629092},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1487668629092},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1487668629092},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1487668629092},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1487668629092},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1487668629092},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1487668629092},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1487668629092},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1487668629093},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1487668629093},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487668629093},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1487668629093},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487668629093},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487668629093},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1487668629093},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1487668629093},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487668629093},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487668629093},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487668629093},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487668629093},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487668629093},{"_id":"public/css/main.css","hash":"4aff9e06909d40d7dd04d558b6a896298ad5e693","modified":1487668629093},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487668629093},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487668629093},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487668629093},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487668629093},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487668629093},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1487668629093},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1487668629093},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1487668629093},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1487668629093},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1487668629093},{"_id":"public/wechat.png","hash":"d7e56c80486c115a92cad915ca9c35a7dbf45c35","modified":1487668629093},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1487668629094},{"_id":"public/head.png","hash":"cc3e0b598c244ca48f4a343540545c3fdb0b240f","modified":1487668629100},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1487668629101}],"Category":[{"name":"Java","_id":"cizfbhn660004p7tlhgs16w0a"},{"name":"docker","_id":"cizfbhn6e0009p7tlqvqzjysy"},{"name":"杂谈","_id":"cizfbhn6k000ip7tlzwkjp06v"},{"name":"Nginx","_id":"cizfbhn6m000qp7tl5sinoqur"}],"Data":[],"Page":[{"title":"about","date":"2016-10-15T23:51:23.000Z","comments":0,"_content":"\n## 关于我\n\n一枚吃货, 一枚家里的好厨子, 一枚85后程序员.\n\n我的联系方式\n\nemaill: fuxiao86@163.com\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-10-16 07:51:23\ncomments: false\n---\n\n## 关于我\n\n一枚吃货, 一枚家里的好厨子, 一枚85后程序员.\n\n我的联系方式\n\nemaill: fuxiao86@163.com\n\n","updated":"2016-12-31T09:29:59.000Z","path":"about/index.html","layout":"page","_id":"cizfbhn600001p7tluhl2u60k","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>一枚吃货, 一枚家里的好厨子, 一枚85后程序员.</p>\n<p>我的联系方式</p>\n<p>emaill: fuxiao86@163.com</p>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>一枚吃货, 一枚家里的好厨子, 一枚85后程序员.</p>\n<p>我的联系方式</p>\n<p>emaill: fuxiao86@163.com</p>\n"},{"title":"categories","date":"2016-10-16T00:18:26.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-10-16 08:18:26\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-12-31T09:29:59.000Z","path":"categories/index.html","layout":"page","_id":"cizfbhn640003p7tlbsasqmvz","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-10-16T00:04:30.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-10-16 08:04:30\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-12-31T09:29:59.000Z","path":"tags/index.html","layout":"page","_id":"cizfbhnav000wp7tldti7x0gi","content":"","excerpt":"","more":""}],"Post":[{"title":"Java8实战读书笔记","date":"2017-02-21T09:10:17.000Z","_content":"\n# Java8 实战学习笔记\n\n## 第二章 通过行为参数化传递代码\n\n`行为参数化` 帮助处理 *频繁变更需求* 的一种软件开发模式. \n\n`Predicate`: 断言, 陈述. 签名: boolean test()\n\n## 第三章 Lambda表达式\n\n`Lambda表达式`: 可以理解为一种匿名函数. 没有名称, 但是有参数列表, 函数主体, 返回类型. 可能还有一个可以抛出异常的异常列表.\n\n`Lambda表达式`可以让你简洁的传递代码.\n\n`Lambda表达式`三部分:\n\n* 参数列表\n* 箭头 ->\n* lambda主体\n\n|使用案例|Lambda示例|对应函数接口|\n|:--|:--|:--|\n|布尔表达式| (List<String list) \\-\\> list.isEmpty()| Predicate<List<String>> |\n|创建对象 | (&nbsp;&nbsp;) \\-\\> new Apple(10) | Supplier<Apple> |\n|消费一个对象 |  (Apple a) \\-\\> {<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a.getWeight()); <br>   }| Consumer<Apple> |\n|从一个对象中选择/抽取|(String s) \\-\\> s.length()| Function<String, Integer> 或 ToIntFunction<String>\n|结合两个值|(int a, int b) \\-\\> a * b| IntBinaryOparator\n|比较两个对象|(Apple a1, Apple a2) \\-\\> a1.getWeight().compareTo(a2.getWeight()) | BiFunction<Apple, Apple, Integer> 或 ToIntBiFunction<Apple, Apple>\n\n\n#### Lambda 使用场景\n\n* 函数式接口\n\n`函数式接口` : 仅仅声明一个抽象方法的接口. \n\n> 只有在接受函数式接口的地方才可以使用`Lambda`表达式.\n\n> 注: Java8+ 接口可以拥有**默认方法**(即在类没有对方法进行实现是, 其主体为方法提供的默认实现的方法), 即使接口内定义了多个默认方法, 但抽象方法只有一个, 则接口仍是一个函数式接口.\n\n`@FunctionalInterface` 注解用于标注函数式接口, 它不是必须的, 单对于函数式接口的设计, 使用它是最好的做法. 就像`@Override`\n\n* 函数描述符\n\n`函数式接口的抽象方法签名就是Lambda表达式的签名`, 我们将这种抽象方法叫**函数描述符**\n\n`函数式描述符` : 指函数式接口的抽象方法签名\n\n常用函数式接口:\n\n|名称|签名|用途|\n|:--|:--|:--|\n| Predicate<T> | T \\-\\> boolean |  |\n| Consumer<T> | T \\-\\> void | 消费对象 |\n| Function<T, R> | T \\-\\> R | 提取新的对象/抽取对象某个属性 |\n| Supplier<T> | () \\-\\> T | new 对象|\n| UnaryOperator<T> | T \\-\\> T |  |\n| BinaryOperator<T> | ( T, T ) \\-\\> T | |\n| BiPredicate<L, R> | ( L, R ) \\-\\> boolean | |\n| BiConsumer<T, U> | ( T, U ) -> void | |\n| BiFunction<T, U, R> | ( T, U ) \\-\\> R | |\n\n> 注为了避免装箱拆箱带来的性能损失, JDK对 `Predicate<T>` 和 `Function<T,R>`等通用函数式接口的原始类型特化: `IntPredicate`, `IntToLangFunction`等.\n> 环绕执行模式( 即在方法所需的代码中间, 你需要执行点什么操作, 比如资源分配和清理)可以配合Lambda提高灵活性和重用性.\n> Lambda表达式所需要代表的类型称之为`目标类型`\n> Comparator, Predicate和Function等函数式接口都有几个可以用来结合Lambda表达式的默认方法.\n\n* Lambda 的类型是从使用 Lambda 的上下文推断出来的. \n\n    > 注意: 如果 Lambda 表达式抛出一个异常, 那么抽象方法所声明的 throws 语句也必须与之匹配.\n    \n* lambda 使用局部变量的一些限制.\n\n    lambda 函数中调用的局部变量必须声明为`final`或者事实上是`final`. \n    \n    1. 实例变量存储在堆中, 而局部变量保存在栈上. Lambda是在一个线程中使用的, 而使用Lambda的线程, 可能会在分配该变量的线程将这个变量收回之后去访问. \n    2. 这一限制不鼓励你使用改变外部变量的典型命令式编程模式. 他会阻碍很容易做到的并行处理.\n\n* 方法引用\n\n    方法引用让你可以重复使用现有的方法定义, 并像 Lambda 一样传递它们. 它的基本思想是: 如果以个 Lambda 代表的只是 \"直接调用这个方法\", 那最好还是用名称调用它, 而不是去描述如何调用它.\n    \n    > 方法引用让你重复使用现有的方法并直接传递它们.\n    \n    你可以把方法引用看做针对仅仅涉及单一方法的Lambda的语法糖.\n    \n    方法引用主要有三类:\n    \n    1. 指向**静态方法**的方法引用, 如, `Integer` 的 `parseInt` 方法, 写作 `Integer::parseInt`.\n    2. 指向**任意类型实例方法**的方法引用, 如 `String` 的 `length` 方法, 写作 `String::length`.\n    3. 指向`现有对象的实例方法`的方法引用.\n\n    > 请注意, 还有针对构造函数, 数组构造函数和父类调用(super-call)的一些特殊形式的方法引用.\n    \n* 构造函数引用\n\n    对于一个现有的构造函数, 可使用: `ClassName :: new`, 如:\n    \n    无参构造函数:\n    \n    ```java\n    Supplier<Apple> c1 = Apple::new;\n    // 等价于\n    Supplier<Apple> c1 = () -> new Apple();\n    ```\n    \n    有一个参数的构造函数:\n\n    ```java\n    Function<Integer, Apple> c2 = Apple::new;\n    // 等价于\n    Function<Integer, Apple> c2 = (weight) -> new Apple(weight);\n    ```\n    \n    有两个参数的构造函数:\n    \n    ```java\n    BiFunction<String, Integer, Apple> c3 = Apple::new\n    // 等价于\n    BiFunction<String, Integer, Apple> c3 = (color, weight) -> new Apple(color, weight);\n    ```\n    \n#### 函数式数据处理\n\n流是Java API的新成员, 它允许你以声明性方式处理数据集合(通过查询语句来表示, 而不是临时编写一个实现). 此外, 流还可以透明地并行处理. \n\n`流`: **从支持数据处理操作的源生成的一系列元素**\n\n* 元素序列: 流提供一个接口, 可以访问特定元素类型的一组有序值.\n* 源: 流会使用一个提供数据的源. 如集合, 数组,输入/输出资源.\n    \n    > 有序集合生成流时会保留原有的顺序.\n    \n* 数据处理操作: 流的数据处理功能支持类似数据库的操作, 一级函数式编程语言中的常用操作, 如: filter, map, reduce, find, match, sort等. 流的操作可以顺序执行, 也可以并行执行.\n\n流的特点:\n\n* 流水线: 流水线的操作可以看做对数据源进行数据库式查询.\n* 内部迭代: 迭代通过 `filter`, `map`, `sorted`等中间操作过滤掉了\n\n集合和流的差异\n\n* 什么时候进行计算. 集合是内存中的数据结构, 它包含数据结构中目前所有的值--集合中的每个元素都是先计算出来才能在添加到集合中的. 流则是概念上固定的数据结构(你不能添加或者删除元素), 其元素是**按需计算**的. 从另一个角度看, 流就像是一个延迟创建的集合; 只有在消费者需要的嘶吼才会计算值. \n  \n* 只能遍历一次. 与迭代器类似, 流只能遍历一次. 遍历完毕, 我们就说这个流已经被消费掉了. 你可以从原始数据源哪里在获取一个新的流并重新遍历一遍. 否则抛出异常: \n\n  ```java\n  java.lang.IllegalStateException: stream has already been operated upon or closed\n  ```\n\n* 集合与流的迭代方式不同. 集合使用的外部迭代, 而流使用的内部迭代. \n\n流的操作\n\n* 中间操作\n\n    中间操作不会执行任何处理. 中间操作一般可以合并起来, 在终端操作时一次性全部处理.\n    \n    * 短路\n    * 循环合并\n    \n* 终端操作\n\n    终端操作会从流的流水线生成结果. \n    \n流的使用, 流的使用一般包含三件事:\n\n* 一个数据源(如集合)来进行一个查询\n* 一个中间操作链, 行程也难怪一条流的流水线\n* 一个终端操作, 执行流水线, 并能生成结果\n\n> 流中的元素是按需计算的.\n> 流的迭代操作由外部迭代转向内部迭代.\n\n* filter 过滤\n* distinct 去重\n* limit 截断 返回给定长度的流\n* skip 跳过 跳过给定长度的元素 如果元素不足, 则返回void\n* map 映射 将 T 转为 R \n* **flatMap** 将映射的流合并为一个流, 即扁平化一个流, 即, 将流中的每个值转为另一个流, 然后把所需要的流连接起来成为一个流.\n* **anyMatch** 判断流中是否*存在一个元素*匹配给定的谓词, **终端操作**, 返回 *boolean*\n* **allMatch** 判断流中是否*所有元素*匹配给定谓词, **终端操作**, 返回 *boolean*\n* **noneMatch** 与`allMatch`相反, 确保流中每个元素与谓词都不匹配. **终端操作**, 返回 *boolean*\n\n> `anyMatch`, `allMatch`, `noneMatch`三个操作都是用到我们所谓的**短路**, 就是Java中的`&&`和`||`运算符的短路在流中的版本.\n> 短路:指不需要处理完所有表达式, 只需要找到一个表达式为false, 则整个表达式都将返回false.\n> 短路对无限大小流非常有用, 可以将无限流变为有限流. \n\n* **findAny** 返回当前流中任意元素, 与其他流操作结合使用. **终端操作**, 返回*Optional<T>*\n\n> `Optional<T>`类是Java8的容器类. 代表一个值存在或者不存在.\n> `isPresent()`: 包含值时返回 true\n> `isPresent(Consumer<T> block)`: 包含值时执行给定代码块.\n> `T get()`: 值存在时返回值, 否则抛出异常`NoSuchElement`.\n> `T orElse(T other)`: 值存在时返回值, 否则返回一个默认值(other).\n\n* **findFirst()** 返回第一个元素. 与其他流操作结合使用. **终端操作**, 返回*Optional<T>*\n\n> 何时使用`findFirst`和`findAny`? 并行时, `findFirst`在并行上限制更多, 如果不关心返回元素是那个, 使用`findAny`, 因为它在使用并行流时限制较少.\n\n\n* **reduce** 归约操作. 此操作有两个版本, 包含初始值, 及不包含初始值的, 两个版本的返回值不同, 不包含初始值的返回值为`Optional`类型. 除了合并结果, 对结果就求最大, 最小值, 数元素个数等等.\n\n> 流的操作分为*有状态*和*无状态*两种. \n\n数值流\n\n对int等原始类型的, map方法生成的包转类型的流, 存在装箱拆箱成本.\n\n* 原始类型特化流: `IntStream`, `DoubleStream`, `LongStream`. 避免了装箱拆箱成本. 且每个接口都带来了进行常用数值归约的新方法. 如: `max`, `sum`, `min`等, 必要时还可以将原始类型特化流转为对象流. \n\n    > 特化原因: 不在于流的复杂性, 而是装箱造成的复杂性, 即类似`int`和`Integer`之间的效率差异.\n    \n* 映射到数值流: `mapToInt`, `mapToDouble`, `mapToLong`\n* 转回对象流: `boxed()`\n* 默认值`OptionalInt`\n\n数值范围\n\nJava8引入了两个用于 `IntStream` 和 `LongStream` 的静态方法, 可用于生成数值范围: `range` 和 `rangeClosed`. 这两个方法都是: 第一个参数接收起始位置, 第二个参数接收结束位置. 区别在于:\n`range`方法不包含*结束位置*, `rangeClosed`方法包含*结束位置*.\n\n构建流\n\n* 由值创建流\n    \n    * `Stream.of()` 显示创建流\n\n* 由数组创建流\n\n    * `Arrays.stream()`\n\n* 由文件生成流\n\n    Java 中用于处理文件等 I/O 操作的 NIO API 已更新, 以便利用 Stream API. `java.nio.file.Files`中很多静态方法都会返回一个流. \n    \n* 由函数生成无限流\n\n    Stream API提供两个静态方法来从函数生成无限流: `Stream.iterate` 和 `Stream.generate` 这连个操作可以创建所谓的**无限流**.\n    \n    无限流: 不像固定集合创建的流那样有固定大小的流. 由 iterate 和 generate 产生的流会用给定函数按需创建值, 因此可以无穷无尽的计算下去!!!, \n    \n    > 注: 一般来说, 应该使用 `limit(N)` 来对这种流加以限制, 以避免打印无穷多个值.\n    \n    * `iterate` 方法接受一个初始值, 还有一个依次应用在每个产生的新值上的 Lambda函数. \n\n        > 一般来说: 在需要依次生成一系列值的时候应该使用`iterate`.\n    \n    * `generate` 方法不是依次对每个新生成的值应用函数, 它接收一个`Supplier<T>`类型的Lambda提供的新值.\n\n    总结\n    \n    * 可使用 `filter`, `distinct`, `skip`, `limit`对流进行筛选或切片\n    * 可使用 `map`, `flatMap`转换流.\n    * 可使用 `findFirst` 和 `findAny`方法查找流中的元素.\n    * 可使用 `anyMatch`, `noneMatch` 和 `allMatch` 方法让流匹配给定谓词.\n    \n    > 这些流都利用了短路: 找到结果立即停止计算; 没有必要处理真个流\n    \n    * 可使用 `reduce` 方法将流中的元素迭代合并成一个结果. 如求和, 最大值等\n    * `filter` 和 `map`等操作是无状态的. 他们并不存储任何状态. \n    * `reduce`等操作要存储状态才能计算一个值. `sorted` 和 `distinct`等操作也要存储状态, 因为他们需要把流中的所有元素缓存起来才能返回一个新的流. 这种操作也叫做有状态操作. \n    * 流由三种基本原始类型特化: `IntStream`, `DoubleStream` 和 `LongStream`. 他们的操作也有相应的特化.\n    * 流不仅可以从集合创建, 也可以从值, 数组, 文件以及`iterate`与`generate`等特定方法创建.\n    * 无限流是没有固定大小的流.\n\n用流收集数据\n\n流支持两种操作: `中间操作` 和 `终端操作`. 中间操作可以链接起来, 将一个流转为另一个流. 这些操作不会消耗流, 其目的是建立一个流水线. 终端操作会消耗流, 以产生一个最终结果, 如返回一个集合, 一个最大元素.\n\n收集器(Collector)\n\n预定义收集器的三大功能:\n\n* 将流元素归约和汇总为一个值\n* 元素分组\n* 元素分区\n\n* `Collectors.counting()`\n* `Collectors.summingInt()`\n* `Collectors.averagingInt()`\n* `Collectors.summarizingInt()`: 通过一次 `summarizing` 操作你可以得到: 总和, 平均值, 最大值, 最下值.\n\n连接字符串\n\n* `Collectors.joining()`\n\n收集(collect)和归约(reduce)\n\n* reduce()方法旨在: 把两个值结合起来生成一个新值, 它是一个不可变的归约. \n* collect()方法的设计就是要改变容器, 从而累积要输出的结果. \n\n分组\n\n* `Collectors.groupingBy()`\n* `Collectors.collectingAndThen`\n* `Collectors.mapping()`\n* `Collectors.toCollection()`\n\n分区\n\n分区是分组的特殊情况: 有一个谓词(返回一个布尔值的函数)作为分类函数, 它称之为分区函数. 分区函数返回一个布尔值, 这意味着得到的分组 Map 的键类型是 `Boolean`, 于是它最多分为两组, `true`是一组, `false`是一组. \n\n* `Collectors.partitioningBy`: 参数需要一个谓词(即: 返回一个布尔值的函数)\n\n分区的优势\n\n分区的好处在于: 保留了分区函数返回 `true` 或 `false` 的两套流元素列表. \n\n\n`Collectors` 类的静态工厂方法\n\n| 工厂方法 | 返回类型 | 用途 |\n| :-- | :-- | :-- |\n`toList` | `List<T>` | 把流中的所有项目收集到一个List \n`toSet` | `Set<T>` | 把流中的所有项目收集到一个Set, 删除重复项\n`toCollection` | `Collection<T>` | 把流中所有项目收集到给定的供应源创建的集合\n`counting` | `Long` | 计算流中的元素个数\n`summingInt` | `Integer` | 对流中项目的一个整数属性求和\n`averagingInt` | `Double` | 对有种项目的一个整数数据求平均值\n`summarizingInt` | `IntSummaryStatistics` | 收集关于流中项目`Integer`属性的统计值, 例如最大, 最小, 总和与平均值.\n`joining` | `String` | 连接流中每个元素, 对每个元素调用 `toString` 方法所生成的字符串进行连接\n`maxBy` | `Optional<T>` | 一个包裹了流中按照给定比较器选出最大元素的 `Optional`\n`minBy` | `Optional<T>` | 同上求最小值\n`reducing` | 归约操作产生的类型 | 从一个作为累加器的初始值开始, 利用`BinaryOperator`与流中的元素逐个结合, 从而将流归约为单个值.\n`collectingAndThen` | 转换函数返回的类型 | 包含另一个收集器, 对其结果应用转换函数.\n`groupingBy` | `Map<K, List<T>>` | 根据项目的一个属性的值对流中的项目作问组, 并将属性值最为结果Map的键\n`partitioningBy` | `Map<Boolean, List<T>>` | 根据对流中每个项目应用谓词的结果来对项目进行分区\n\n收集器接口\n\nCollector接口:\n\n```java\npublic interface Collector<T, A, R> {\n    Supplier<A> supplier();\n    BiConsumer<A, T> accumulator();\n    Function<A, R> finisher();\n    BinaryOperator<A> combiner();\n    Set<Characteristics> characteristics();\n}\n```\n\n* T 是流中要收集的项目泛型\n* A 是累加器的类型, 累加器是在收集过程中用于累积部分结果的对象\n* R 是收集操作得到的对象(通常但并不一定是集合)的类型.\n\n前面四个方法都会返回一个会被 `collect` 方法调用的函数, 而第五个方法 `characteristics` 则提供了一系列特征, 也就是一个提示列表, 告诉 `collect` 方法在执行归约操作的时候可以应用那些优化(比如并行化).\n\n* 建立新的结果容器: `supplier` 方法\n\n    `supplier` 方法必须放回一个结果为空的 `Supplier`, 也就是一个无参的构造函数, 在调用时它会创建一个空的累加器实例, 提供数据收集过程使用. \n    \n* 将元素添加到结果容器: `accumulator` 方法\n\n    `accumulator` 方法会返回执行归约操作的函数. 当遍历到流中第 `n` 个元素时, 这个函数执行时会有两个参数: 保存归约结果的累加器(已收集了流中前 `n-1` 个元素), 还有第 `n` 个元素本身. 该函数将返回 `void`, 因为累加器是原位更新, 即*函数的执行改变了它的内部状态以体现遍历的元素的效果*. \n    \n* 对结果容器应用最终转换: `finisher` 方法\n\n    在遍历完流后, `finisher` 方法必须返回在累积过程的最后要调用的一个函数, 以便将累加器对象转换为整个集合操作的最终结果. 通常, 累加器对象(`accumulator` 方法返回)恰好符合预期的最终结果, 因此无需进行转换. 所以 `finisher` 方法只需返回 `Function` 接口的静态方法 `identity` 函数. \n    \n\n以上三个方法已经足以对流进行顺序归约. \n\n![-w2280](https://image.fuxiao86.com/14876400532202.jpg)\n\n* 合并两个结果容器: `combiner` 方法\n\n    `combiner` 方法会返回一个供归约操作使用的函数, 它定义了对流的各个子部分进行并行处理时, 各个子部分归约所得的累加器要如何合并. \n    \n    有了这第四个方法, 就可以对流进行并行归约了. 它会用到JAVA7中引入的*分支/合并框架*和*Spliterator*抽象. \n    \n    ![-w1209](https://image.fuxiao86.com/14876413432867.jpg)\n\n* `characteristics` 方法\n\n    `characteristics` 会返回一个不可变的 `Characteristics` 集合, 它定义了收集器的行为 - 尤其是关于流是否可以并行归约, 以及可以使用那些优化的提示. \n    \n    `Characteristics` 是一个包含三个项目的枚举.\n    \n    * `UNORDERED`: 归约结果不受流中项目的遍历和累积顺序的影响.\n    * `CONCURRENT`: `accumulator`函数可以从多个线程同时调用, 且该收集器可以并行归约流. 如果收集器没有标记为 `UNORDERED`, 那它仅在用于无序数据源时才可以并行归约. \n    * `IDENTITY_FINISH`: 这表明完成器方法返回的函数是一个恒等函数, 可以跳过. 这种情况下累加器对象将会直接用作归约过程的最终结果. 这也意味着, 将累加器A不加检查地转换为结果R是安全的.\n\n> `Collections.emptyList()` 获取一个空的 List\n\n小结\n\n* `collect` 是一个终端操作, 它接受的参数时将流中的元素累积到汇总结果的各种方式(称为收集器).\n* 预定义收集器包括: 将流元素归约和汇总到一个值, 例如计算最小值, 最大值或平均值.\n* 预定义收集器可以用`groupingBy` 对流中元素进行分组, 或用` partitioningBy`进行分区.\n* 收集器可以高效地复合起来, 进行多级分组, 分区和归约.\n* 可以自定义实现` Collector` 接口中定义的方法来开发自己的收集器.\n\n并行数据处理及性能\n\n* 并行流\n\n    并行流: 是一个把内容分成多个数据块, 并且不同的线程分别处理每个数据块的流.\n    \n    可以通过对收集源调用` parallelStream` 方法来把集合转为并行流.\n    \n    * 对流调用 `parallel()` 方法可以转为并行流\n    * 对并行流调用` sequential()` 方法可以转为顺序流\n\n    并行流内部使用了默认的` ForkJoinPool`, 它默认的线程数量就是运行机器的处理器数量, 这个值是由` Runtime.getRuntime().availableProcessors()`得到. 但可以通过系统属性: `java.util.concurrent.ForkJoinPool.common.parallelism` 来改变线程池大小.\n    \n    ```java\n    System.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\", 12);\n    ```\n    \n    这是一个全局设置, 因此它将影响代码中所有的并行流. 反过来目前还无法转为某个并行流指定这个值. 一般而言, 让` ForkJoinPool` 的大小等于处理器的数量是个不错的默认值.\n    \n    > iterate 很难分割成能够独立执行的小块, 因为每次应用这个函数都有依赖前一次应用的结果.\n\n    > 共享可变状态会影响并行流以及并行计算. 所以**避免共享可变状态**\n    \n    高效的使用并行流\n    \n    * 如果对并行效率有疑问, 请测试运算时间.\n    * 注意装箱拆箱操作. 自动装箱机拆箱会大大降低性能.\n    * 有些操作本身在并行流上的性能就比顺序流差. 特别是 `limit` 和 `findFirst` 等依赖于元素顺序的操作. 他们在并行流上执行的代价非常大. `findAny` 会比 `findFirst` 性能好. 可以通过调用 `unordered` 方法来把有序流变成无序流. 对无序并行流调用 `limit` 可能会比单个有序流更高效.\n    * 并行成本 = N*Q. N: 要处理的元素总数, Q: 一个元素通过流水线的大致处理成本. Q值越高, 意味着并行流性能好的可能性比较大.\n    * 对于较小的数据量, 选择并行流几乎从来都不是一个好的决定. 并行处理少数几个元素的好处抵不上并行化造成的额外开销.\n    * 需要考虑流背后的数据结构是否易于分解. 如: AarrayList 的拆分效率比 LinkedList 高的多, 因为前者用不着遍历就可以平均拆分, 而后者必须遍历. \n    * 流自身的特点, 以及流水线中的中间操作修改流的方式, 都可能改变分解过程的性能. \n    * 还需要考虑终端操作中合并步骤的代价高低. 如 `Collector` 中的 `combiner` 方法.\n\n    分支/合并框架\n    \n    * RecursiveTask<R>/RecursiveAction\n\n        R 是并行化产生的结果类型. 如果任务不返回结果, 则是用 `RecursiveAction`\n        \n    * Fork/Join 框架的工作窃取技术\n    * Spliterator 接口.  可分迭代器. 用来遍历数据源中数据, 但它是为了并行执行而设计的. \n\n        ```java\n        public interface Spliterator<T> {\n            boolean tryAdvance(Consumer<? super T> action);\n            Spliterator<T> trySplit();\n            long estmateSize();\n            int characteristics();\n        }\n        ```\n        \n        * T 是 Spliterator 遍历的元素的类型\n        * tryAdvance 方法的行为类似于普通的 Iterator, 因为它会按顺序一个一个使用 Spliterator 中的元素, 并且如果还有其他元素要遍历就返回 true\n        * trySplit 是装为 Spliterator 接口设计的, 因为它可以把一些元素划出去分给第二个 Spliterator( 由该方法返回), 让它们两个并行处理. \n        * Spliterator 通过 estimateSize 方法估计还剩多少元素要遍历\n        * characteristics抽象方法, 返回一个 int, 代表Spliterator 本身特性集的编码. 使用 Spliterator 的客户可以使用这些特性来更好地控制和优化它.\n        \n        ![-w1422](https://image.fuxiao86.com/14876646717073.jpg)\n\n\n\n\n","source":"_posts/Java8实战读书笔记.md","raw":"---\ntitle: Java8实战读书笔记\ndate: 2017-02-21 17:10:17\ntags: Java\ncategories: Java\n---\n\n# Java8 实战学习笔记\n\n## 第二章 通过行为参数化传递代码\n\n`行为参数化` 帮助处理 *频繁变更需求* 的一种软件开发模式. \n\n`Predicate`: 断言, 陈述. 签名: boolean test()\n\n## 第三章 Lambda表达式\n\n`Lambda表达式`: 可以理解为一种匿名函数. 没有名称, 但是有参数列表, 函数主体, 返回类型. 可能还有一个可以抛出异常的异常列表.\n\n`Lambda表达式`可以让你简洁的传递代码.\n\n`Lambda表达式`三部分:\n\n* 参数列表\n* 箭头 ->\n* lambda主体\n\n|使用案例|Lambda示例|对应函数接口|\n|:--|:--|:--|\n|布尔表达式| (List<String list) \\-\\> list.isEmpty()| Predicate<List<String>> |\n|创建对象 | (&nbsp;&nbsp;) \\-\\> new Apple(10) | Supplier<Apple> |\n|消费一个对象 |  (Apple a) \\-\\> {<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a.getWeight()); <br>   }| Consumer<Apple> |\n|从一个对象中选择/抽取|(String s) \\-\\> s.length()| Function<String, Integer> 或 ToIntFunction<String>\n|结合两个值|(int a, int b) \\-\\> a * b| IntBinaryOparator\n|比较两个对象|(Apple a1, Apple a2) \\-\\> a1.getWeight().compareTo(a2.getWeight()) | BiFunction<Apple, Apple, Integer> 或 ToIntBiFunction<Apple, Apple>\n\n\n#### Lambda 使用场景\n\n* 函数式接口\n\n`函数式接口` : 仅仅声明一个抽象方法的接口. \n\n> 只有在接受函数式接口的地方才可以使用`Lambda`表达式.\n\n> 注: Java8+ 接口可以拥有**默认方法**(即在类没有对方法进行实现是, 其主体为方法提供的默认实现的方法), 即使接口内定义了多个默认方法, 但抽象方法只有一个, 则接口仍是一个函数式接口.\n\n`@FunctionalInterface` 注解用于标注函数式接口, 它不是必须的, 单对于函数式接口的设计, 使用它是最好的做法. 就像`@Override`\n\n* 函数描述符\n\n`函数式接口的抽象方法签名就是Lambda表达式的签名`, 我们将这种抽象方法叫**函数描述符**\n\n`函数式描述符` : 指函数式接口的抽象方法签名\n\n常用函数式接口:\n\n|名称|签名|用途|\n|:--|:--|:--|\n| Predicate<T> | T \\-\\> boolean |  |\n| Consumer<T> | T \\-\\> void | 消费对象 |\n| Function<T, R> | T \\-\\> R | 提取新的对象/抽取对象某个属性 |\n| Supplier<T> | () \\-\\> T | new 对象|\n| UnaryOperator<T> | T \\-\\> T |  |\n| BinaryOperator<T> | ( T, T ) \\-\\> T | |\n| BiPredicate<L, R> | ( L, R ) \\-\\> boolean | |\n| BiConsumer<T, U> | ( T, U ) -> void | |\n| BiFunction<T, U, R> | ( T, U ) \\-\\> R | |\n\n> 注为了避免装箱拆箱带来的性能损失, JDK对 `Predicate<T>` 和 `Function<T,R>`等通用函数式接口的原始类型特化: `IntPredicate`, `IntToLangFunction`等.\n> 环绕执行模式( 即在方法所需的代码中间, 你需要执行点什么操作, 比如资源分配和清理)可以配合Lambda提高灵活性和重用性.\n> Lambda表达式所需要代表的类型称之为`目标类型`\n> Comparator, Predicate和Function等函数式接口都有几个可以用来结合Lambda表达式的默认方法.\n\n* Lambda 的类型是从使用 Lambda 的上下文推断出来的. \n\n    > 注意: 如果 Lambda 表达式抛出一个异常, 那么抽象方法所声明的 throws 语句也必须与之匹配.\n    \n* lambda 使用局部变量的一些限制.\n\n    lambda 函数中调用的局部变量必须声明为`final`或者事实上是`final`. \n    \n    1. 实例变量存储在堆中, 而局部变量保存在栈上. Lambda是在一个线程中使用的, 而使用Lambda的线程, 可能会在分配该变量的线程将这个变量收回之后去访问. \n    2. 这一限制不鼓励你使用改变外部变量的典型命令式编程模式. 他会阻碍很容易做到的并行处理.\n\n* 方法引用\n\n    方法引用让你可以重复使用现有的方法定义, 并像 Lambda 一样传递它们. 它的基本思想是: 如果以个 Lambda 代表的只是 \"直接调用这个方法\", 那最好还是用名称调用它, 而不是去描述如何调用它.\n    \n    > 方法引用让你重复使用现有的方法并直接传递它们.\n    \n    你可以把方法引用看做针对仅仅涉及单一方法的Lambda的语法糖.\n    \n    方法引用主要有三类:\n    \n    1. 指向**静态方法**的方法引用, 如, `Integer` 的 `parseInt` 方法, 写作 `Integer::parseInt`.\n    2. 指向**任意类型实例方法**的方法引用, 如 `String` 的 `length` 方法, 写作 `String::length`.\n    3. 指向`现有对象的实例方法`的方法引用.\n\n    > 请注意, 还有针对构造函数, 数组构造函数和父类调用(super-call)的一些特殊形式的方法引用.\n    \n* 构造函数引用\n\n    对于一个现有的构造函数, 可使用: `ClassName :: new`, 如:\n    \n    无参构造函数:\n    \n    ```java\n    Supplier<Apple> c1 = Apple::new;\n    // 等价于\n    Supplier<Apple> c1 = () -> new Apple();\n    ```\n    \n    有一个参数的构造函数:\n\n    ```java\n    Function<Integer, Apple> c2 = Apple::new;\n    // 等价于\n    Function<Integer, Apple> c2 = (weight) -> new Apple(weight);\n    ```\n    \n    有两个参数的构造函数:\n    \n    ```java\n    BiFunction<String, Integer, Apple> c3 = Apple::new\n    // 等价于\n    BiFunction<String, Integer, Apple> c3 = (color, weight) -> new Apple(color, weight);\n    ```\n    \n#### 函数式数据处理\n\n流是Java API的新成员, 它允许你以声明性方式处理数据集合(通过查询语句来表示, 而不是临时编写一个实现). 此外, 流还可以透明地并行处理. \n\n`流`: **从支持数据处理操作的源生成的一系列元素**\n\n* 元素序列: 流提供一个接口, 可以访问特定元素类型的一组有序值.\n* 源: 流会使用一个提供数据的源. 如集合, 数组,输入/输出资源.\n    \n    > 有序集合生成流时会保留原有的顺序.\n    \n* 数据处理操作: 流的数据处理功能支持类似数据库的操作, 一级函数式编程语言中的常用操作, 如: filter, map, reduce, find, match, sort等. 流的操作可以顺序执行, 也可以并行执行.\n\n流的特点:\n\n* 流水线: 流水线的操作可以看做对数据源进行数据库式查询.\n* 内部迭代: 迭代通过 `filter`, `map`, `sorted`等中间操作过滤掉了\n\n集合和流的差异\n\n* 什么时候进行计算. 集合是内存中的数据结构, 它包含数据结构中目前所有的值--集合中的每个元素都是先计算出来才能在添加到集合中的. 流则是概念上固定的数据结构(你不能添加或者删除元素), 其元素是**按需计算**的. 从另一个角度看, 流就像是一个延迟创建的集合; 只有在消费者需要的嘶吼才会计算值. \n  \n* 只能遍历一次. 与迭代器类似, 流只能遍历一次. 遍历完毕, 我们就说这个流已经被消费掉了. 你可以从原始数据源哪里在获取一个新的流并重新遍历一遍. 否则抛出异常: \n\n  ```java\n  java.lang.IllegalStateException: stream has already been operated upon or closed\n  ```\n\n* 集合与流的迭代方式不同. 集合使用的外部迭代, 而流使用的内部迭代. \n\n流的操作\n\n* 中间操作\n\n    中间操作不会执行任何处理. 中间操作一般可以合并起来, 在终端操作时一次性全部处理.\n    \n    * 短路\n    * 循环合并\n    \n* 终端操作\n\n    终端操作会从流的流水线生成结果. \n    \n流的使用, 流的使用一般包含三件事:\n\n* 一个数据源(如集合)来进行一个查询\n* 一个中间操作链, 行程也难怪一条流的流水线\n* 一个终端操作, 执行流水线, 并能生成结果\n\n> 流中的元素是按需计算的.\n> 流的迭代操作由外部迭代转向内部迭代.\n\n* filter 过滤\n* distinct 去重\n* limit 截断 返回给定长度的流\n* skip 跳过 跳过给定长度的元素 如果元素不足, 则返回void\n* map 映射 将 T 转为 R \n* **flatMap** 将映射的流合并为一个流, 即扁平化一个流, 即, 将流中的每个值转为另一个流, 然后把所需要的流连接起来成为一个流.\n* **anyMatch** 判断流中是否*存在一个元素*匹配给定的谓词, **终端操作**, 返回 *boolean*\n* **allMatch** 判断流中是否*所有元素*匹配给定谓词, **终端操作**, 返回 *boolean*\n* **noneMatch** 与`allMatch`相反, 确保流中每个元素与谓词都不匹配. **终端操作**, 返回 *boolean*\n\n> `anyMatch`, `allMatch`, `noneMatch`三个操作都是用到我们所谓的**短路**, 就是Java中的`&&`和`||`运算符的短路在流中的版本.\n> 短路:指不需要处理完所有表达式, 只需要找到一个表达式为false, 则整个表达式都将返回false.\n> 短路对无限大小流非常有用, 可以将无限流变为有限流. \n\n* **findAny** 返回当前流中任意元素, 与其他流操作结合使用. **终端操作**, 返回*Optional<T>*\n\n> `Optional<T>`类是Java8的容器类. 代表一个值存在或者不存在.\n> `isPresent()`: 包含值时返回 true\n> `isPresent(Consumer<T> block)`: 包含值时执行给定代码块.\n> `T get()`: 值存在时返回值, 否则抛出异常`NoSuchElement`.\n> `T orElse(T other)`: 值存在时返回值, 否则返回一个默认值(other).\n\n* **findFirst()** 返回第一个元素. 与其他流操作结合使用. **终端操作**, 返回*Optional<T>*\n\n> 何时使用`findFirst`和`findAny`? 并行时, `findFirst`在并行上限制更多, 如果不关心返回元素是那个, 使用`findAny`, 因为它在使用并行流时限制较少.\n\n\n* **reduce** 归约操作. 此操作有两个版本, 包含初始值, 及不包含初始值的, 两个版本的返回值不同, 不包含初始值的返回值为`Optional`类型. 除了合并结果, 对结果就求最大, 最小值, 数元素个数等等.\n\n> 流的操作分为*有状态*和*无状态*两种. \n\n数值流\n\n对int等原始类型的, map方法生成的包转类型的流, 存在装箱拆箱成本.\n\n* 原始类型特化流: `IntStream`, `DoubleStream`, `LongStream`. 避免了装箱拆箱成本. 且每个接口都带来了进行常用数值归约的新方法. 如: `max`, `sum`, `min`等, 必要时还可以将原始类型特化流转为对象流. \n\n    > 特化原因: 不在于流的复杂性, 而是装箱造成的复杂性, 即类似`int`和`Integer`之间的效率差异.\n    \n* 映射到数值流: `mapToInt`, `mapToDouble`, `mapToLong`\n* 转回对象流: `boxed()`\n* 默认值`OptionalInt`\n\n数值范围\n\nJava8引入了两个用于 `IntStream` 和 `LongStream` 的静态方法, 可用于生成数值范围: `range` 和 `rangeClosed`. 这两个方法都是: 第一个参数接收起始位置, 第二个参数接收结束位置. 区别在于:\n`range`方法不包含*结束位置*, `rangeClosed`方法包含*结束位置*.\n\n构建流\n\n* 由值创建流\n    \n    * `Stream.of()` 显示创建流\n\n* 由数组创建流\n\n    * `Arrays.stream()`\n\n* 由文件生成流\n\n    Java 中用于处理文件等 I/O 操作的 NIO API 已更新, 以便利用 Stream API. `java.nio.file.Files`中很多静态方法都会返回一个流. \n    \n* 由函数生成无限流\n\n    Stream API提供两个静态方法来从函数生成无限流: `Stream.iterate` 和 `Stream.generate` 这连个操作可以创建所谓的**无限流**.\n    \n    无限流: 不像固定集合创建的流那样有固定大小的流. 由 iterate 和 generate 产生的流会用给定函数按需创建值, 因此可以无穷无尽的计算下去!!!, \n    \n    > 注: 一般来说, 应该使用 `limit(N)` 来对这种流加以限制, 以避免打印无穷多个值.\n    \n    * `iterate` 方法接受一个初始值, 还有一个依次应用在每个产生的新值上的 Lambda函数. \n\n        > 一般来说: 在需要依次生成一系列值的时候应该使用`iterate`.\n    \n    * `generate` 方法不是依次对每个新生成的值应用函数, 它接收一个`Supplier<T>`类型的Lambda提供的新值.\n\n    总结\n    \n    * 可使用 `filter`, `distinct`, `skip`, `limit`对流进行筛选或切片\n    * 可使用 `map`, `flatMap`转换流.\n    * 可使用 `findFirst` 和 `findAny`方法查找流中的元素.\n    * 可使用 `anyMatch`, `noneMatch` 和 `allMatch` 方法让流匹配给定谓词.\n    \n    > 这些流都利用了短路: 找到结果立即停止计算; 没有必要处理真个流\n    \n    * 可使用 `reduce` 方法将流中的元素迭代合并成一个结果. 如求和, 最大值等\n    * `filter` 和 `map`等操作是无状态的. 他们并不存储任何状态. \n    * `reduce`等操作要存储状态才能计算一个值. `sorted` 和 `distinct`等操作也要存储状态, 因为他们需要把流中的所有元素缓存起来才能返回一个新的流. 这种操作也叫做有状态操作. \n    * 流由三种基本原始类型特化: `IntStream`, `DoubleStream` 和 `LongStream`. 他们的操作也有相应的特化.\n    * 流不仅可以从集合创建, 也可以从值, 数组, 文件以及`iterate`与`generate`等特定方法创建.\n    * 无限流是没有固定大小的流.\n\n用流收集数据\n\n流支持两种操作: `中间操作` 和 `终端操作`. 中间操作可以链接起来, 将一个流转为另一个流. 这些操作不会消耗流, 其目的是建立一个流水线. 终端操作会消耗流, 以产生一个最终结果, 如返回一个集合, 一个最大元素.\n\n收集器(Collector)\n\n预定义收集器的三大功能:\n\n* 将流元素归约和汇总为一个值\n* 元素分组\n* 元素分区\n\n* `Collectors.counting()`\n* `Collectors.summingInt()`\n* `Collectors.averagingInt()`\n* `Collectors.summarizingInt()`: 通过一次 `summarizing` 操作你可以得到: 总和, 平均值, 最大值, 最下值.\n\n连接字符串\n\n* `Collectors.joining()`\n\n收集(collect)和归约(reduce)\n\n* reduce()方法旨在: 把两个值结合起来生成一个新值, 它是一个不可变的归约. \n* collect()方法的设计就是要改变容器, 从而累积要输出的结果. \n\n分组\n\n* `Collectors.groupingBy()`\n* `Collectors.collectingAndThen`\n* `Collectors.mapping()`\n* `Collectors.toCollection()`\n\n分区\n\n分区是分组的特殊情况: 有一个谓词(返回一个布尔值的函数)作为分类函数, 它称之为分区函数. 分区函数返回一个布尔值, 这意味着得到的分组 Map 的键类型是 `Boolean`, 于是它最多分为两组, `true`是一组, `false`是一组. \n\n* `Collectors.partitioningBy`: 参数需要一个谓词(即: 返回一个布尔值的函数)\n\n分区的优势\n\n分区的好处在于: 保留了分区函数返回 `true` 或 `false` 的两套流元素列表. \n\n\n`Collectors` 类的静态工厂方法\n\n| 工厂方法 | 返回类型 | 用途 |\n| :-- | :-- | :-- |\n`toList` | `List<T>` | 把流中的所有项目收集到一个List \n`toSet` | `Set<T>` | 把流中的所有项目收集到一个Set, 删除重复项\n`toCollection` | `Collection<T>` | 把流中所有项目收集到给定的供应源创建的集合\n`counting` | `Long` | 计算流中的元素个数\n`summingInt` | `Integer` | 对流中项目的一个整数属性求和\n`averagingInt` | `Double` | 对有种项目的一个整数数据求平均值\n`summarizingInt` | `IntSummaryStatistics` | 收集关于流中项目`Integer`属性的统计值, 例如最大, 最小, 总和与平均值.\n`joining` | `String` | 连接流中每个元素, 对每个元素调用 `toString` 方法所生成的字符串进行连接\n`maxBy` | `Optional<T>` | 一个包裹了流中按照给定比较器选出最大元素的 `Optional`\n`minBy` | `Optional<T>` | 同上求最小值\n`reducing` | 归约操作产生的类型 | 从一个作为累加器的初始值开始, 利用`BinaryOperator`与流中的元素逐个结合, 从而将流归约为单个值.\n`collectingAndThen` | 转换函数返回的类型 | 包含另一个收集器, 对其结果应用转换函数.\n`groupingBy` | `Map<K, List<T>>` | 根据项目的一个属性的值对流中的项目作问组, 并将属性值最为结果Map的键\n`partitioningBy` | `Map<Boolean, List<T>>` | 根据对流中每个项目应用谓词的结果来对项目进行分区\n\n收集器接口\n\nCollector接口:\n\n```java\npublic interface Collector<T, A, R> {\n    Supplier<A> supplier();\n    BiConsumer<A, T> accumulator();\n    Function<A, R> finisher();\n    BinaryOperator<A> combiner();\n    Set<Characteristics> characteristics();\n}\n```\n\n* T 是流中要收集的项目泛型\n* A 是累加器的类型, 累加器是在收集过程中用于累积部分结果的对象\n* R 是收集操作得到的对象(通常但并不一定是集合)的类型.\n\n前面四个方法都会返回一个会被 `collect` 方法调用的函数, 而第五个方法 `characteristics` 则提供了一系列特征, 也就是一个提示列表, 告诉 `collect` 方法在执行归约操作的时候可以应用那些优化(比如并行化).\n\n* 建立新的结果容器: `supplier` 方法\n\n    `supplier` 方法必须放回一个结果为空的 `Supplier`, 也就是一个无参的构造函数, 在调用时它会创建一个空的累加器实例, 提供数据收集过程使用. \n    \n* 将元素添加到结果容器: `accumulator` 方法\n\n    `accumulator` 方法会返回执行归约操作的函数. 当遍历到流中第 `n` 个元素时, 这个函数执行时会有两个参数: 保存归约结果的累加器(已收集了流中前 `n-1` 个元素), 还有第 `n` 个元素本身. 该函数将返回 `void`, 因为累加器是原位更新, 即*函数的执行改变了它的内部状态以体现遍历的元素的效果*. \n    \n* 对结果容器应用最终转换: `finisher` 方法\n\n    在遍历完流后, `finisher` 方法必须返回在累积过程的最后要调用的一个函数, 以便将累加器对象转换为整个集合操作的最终结果. 通常, 累加器对象(`accumulator` 方法返回)恰好符合预期的最终结果, 因此无需进行转换. 所以 `finisher` 方法只需返回 `Function` 接口的静态方法 `identity` 函数. \n    \n\n以上三个方法已经足以对流进行顺序归约. \n\n![-w2280](https://image.fuxiao86.com/14876400532202.jpg)\n\n* 合并两个结果容器: `combiner` 方法\n\n    `combiner` 方法会返回一个供归约操作使用的函数, 它定义了对流的各个子部分进行并行处理时, 各个子部分归约所得的累加器要如何合并. \n    \n    有了这第四个方法, 就可以对流进行并行归约了. 它会用到JAVA7中引入的*分支/合并框架*和*Spliterator*抽象. \n    \n    ![-w1209](https://image.fuxiao86.com/14876413432867.jpg)\n\n* `characteristics` 方法\n\n    `characteristics` 会返回一个不可变的 `Characteristics` 集合, 它定义了收集器的行为 - 尤其是关于流是否可以并行归约, 以及可以使用那些优化的提示. \n    \n    `Characteristics` 是一个包含三个项目的枚举.\n    \n    * `UNORDERED`: 归约结果不受流中项目的遍历和累积顺序的影响.\n    * `CONCURRENT`: `accumulator`函数可以从多个线程同时调用, 且该收集器可以并行归约流. 如果收集器没有标记为 `UNORDERED`, 那它仅在用于无序数据源时才可以并行归约. \n    * `IDENTITY_FINISH`: 这表明完成器方法返回的函数是一个恒等函数, 可以跳过. 这种情况下累加器对象将会直接用作归约过程的最终结果. 这也意味着, 将累加器A不加检查地转换为结果R是安全的.\n\n> `Collections.emptyList()` 获取一个空的 List\n\n小结\n\n* `collect` 是一个终端操作, 它接受的参数时将流中的元素累积到汇总结果的各种方式(称为收集器).\n* 预定义收集器包括: 将流元素归约和汇总到一个值, 例如计算最小值, 最大值或平均值.\n* 预定义收集器可以用`groupingBy` 对流中元素进行分组, 或用` partitioningBy`进行分区.\n* 收集器可以高效地复合起来, 进行多级分组, 分区和归约.\n* 可以自定义实现` Collector` 接口中定义的方法来开发自己的收集器.\n\n并行数据处理及性能\n\n* 并行流\n\n    并行流: 是一个把内容分成多个数据块, 并且不同的线程分别处理每个数据块的流.\n    \n    可以通过对收集源调用` parallelStream` 方法来把集合转为并行流.\n    \n    * 对流调用 `parallel()` 方法可以转为并行流\n    * 对并行流调用` sequential()` 方法可以转为顺序流\n\n    并行流内部使用了默认的` ForkJoinPool`, 它默认的线程数量就是运行机器的处理器数量, 这个值是由` Runtime.getRuntime().availableProcessors()`得到. 但可以通过系统属性: `java.util.concurrent.ForkJoinPool.common.parallelism` 来改变线程池大小.\n    \n    ```java\n    System.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\", 12);\n    ```\n    \n    这是一个全局设置, 因此它将影响代码中所有的并行流. 反过来目前还无法转为某个并行流指定这个值. 一般而言, 让` ForkJoinPool` 的大小等于处理器的数量是个不错的默认值.\n    \n    > iterate 很难分割成能够独立执行的小块, 因为每次应用这个函数都有依赖前一次应用的结果.\n\n    > 共享可变状态会影响并行流以及并行计算. 所以**避免共享可变状态**\n    \n    高效的使用并行流\n    \n    * 如果对并行效率有疑问, 请测试运算时间.\n    * 注意装箱拆箱操作. 自动装箱机拆箱会大大降低性能.\n    * 有些操作本身在并行流上的性能就比顺序流差. 特别是 `limit` 和 `findFirst` 等依赖于元素顺序的操作. 他们在并行流上执行的代价非常大. `findAny` 会比 `findFirst` 性能好. 可以通过调用 `unordered` 方法来把有序流变成无序流. 对无序并行流调用 `limit` 可能会比单个有序流更高效.\n    * 并行成本 = N*Q. N: 要处理的元素总数, Q: 一个元素通过流水线的大致处理成本. Q值越高, 意味着并行流性能好的可能性比较大.\n    * 对于较小的数据量, 选择并行流几乎从来都不是一个好的决定. 并行处理少数几个元素的好处抵不上并行化造成的额外开销.\n    * 需要考虑流背后的数据结构是否易于分解. 如: AarrayList 的拆分效率比 LinkedList 高的多, 因为前者用不着遍历就可以平均拆分, 而后者必须遍历. \n    * 流自身的特点, 以及流水线中的中间操作修改流的方式, 都可能改变分解过程的性能. \n    * 还需要考虑终端操作中合并步骤的代价高低. 如 `Collector` 中的 `combiner` 方法.\n\n    分支/合并框架\n    \n    * RecursiveTask<R>/RecursiveAction\n\n        R 是并行化产生的结果类型. 如果任务不返回结果, 则是用 `RecursiveAction`\n        \n    * Fork/Join 框架的工作窃取技术\n    * Spliterator 接口.  可分迭代器. 用来遍历数据源中数据, 但它是为了并行执行而设计的. \n\n        ```java\n        public interface Spliterator<T> {\n            boolean tryAdvance(Consumer<? super T> action);\n            Spliterator<T> trySplit();\n            long estmateSize();\n            int characteristics();\n        }\n        ```\n        \n        * T 是 Spliterator 遍历的元素的类型\n        * tryAdvance 方法的行为类似于普通的 Iterator, 因为它会按顺序一个一个使用 Spliterator 中的元素, 并且如果还有其他元素要遍历就返回 true\n        * trySplit 是装为 Spliterator 接口设计的, 因为它可以把一些元素划出去分给第二个 Spliterator( 由该方法返回), 让它们两个并行处理. \n        * Spliterator 通过 estimateSize 方法估计还剩多少元素要遍历\n        * characteristics抽象方法, 返回一个 int, 代表Spliterator 本身特性集的编码. 使用 Spliterator 的客户可以使用这些特性来更好地控制和优化它.\n        \n        ![-w1422](https://image.fuxiao86.com/14876646717073.jpg)\n\n\n\n\n","slug":"Java8实战读书笔记","published":1,"updated":"2017-02-21T09:15:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfbhn5x0000p7tl6503ri30","content":"<h1 id=\"Java8-实战学习笔记\"><a href=\"#Java8-实战学习笔记\" class=\"headerlink\" title=\"Java8 实战学习笔记\"></a>Java8 实战学习笔记</h1><h2 id=\"第二章-通过行为参数化传递代码\"><a href=\"#第二章-通过行为参数化传递代码\" class=\"headerlink\" title=\"第二章 通过行为参数化传递代码\"></a>第二章 通过行为参数化传递代码</h2><p><code>行为参数化</code> 帮助处理 <em>频繁变更需求</em> 的一种软件开发模式. </p>\n<p><code>Predicate</code>: 断言, 陈述. 签名: boolean test()</p>\n<h2 id=\"第三章-Lambda表达式\"><a href=\"#第三章-Lambda表达式\" class=\"headerlink\" title=\"第三章 Lambda表达式\"></a>第三章 Lambda表达式</h2><p><code>Lambda表达式</code>: 可以理解为一种匿名函数. 没有名称, 但是有参数列表, 函数主体, 返回类型. 可能还有一个可以抛出异常的异常列表.</p>\n<p><code>Lambda表达式</code>可以让你简洁的传递代码.</p>\n<p><code>Lambda表达式</code>三部分:</p>\n<ul>\n<li>参数列表</li>\n<li>箭头 -&gt;</li>\n<li>lambda主体</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">使用案例</th>\n<th style=\"text-align:left\">Lambda示例</th>\n<th style=\"text-align:left\">对应函数接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">布尔表达式</td>\n<td style=\"text-align:left\">(List<string list)=\"\" \\-\\=\"\"> list.isEmpty()</string></td>\n<td style=\"text-align:left\">Predicate<list<string>&gt;</list<string></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">创建对象</td>\n<td style=\"text-align:left\">(&nbsp;&nbsp;) -> new Apple(10)</td>\n<td style=\"text-align:left\">Supplier<apple></apple></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消费一个对象</td>\n<td style=\"text-align:left\">(Apple a) -> {<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a.getWeight()); <br>   }</td>\n<td style=\"text-align:left\">Consumer<apple></apple></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">从一个对象中选择/抽取</td>\n<td style=\"text-align:left\">(String s) -> s.length()</td>\n<td style=\"text-align:left\">Function<string, integer=\"\"> 或 ToIntFunction<string></string></string,></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">结合两个值</td>\n<td style=\"text-align:left\">(int a, int b) -> a * b</td>\n<td style=\"text-align:left\">IntBinaryOparator</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">比较两个对象</td>\n<td style=\"text-align:left\">(Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight())</td>\n<td style=\"text-align:left\">BiFunction<apple, apple,=\"\" integer=\"\"> 或 ToIntBiFunction<apple, apple=\"\"></apple,></apple,></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Lambda-使用场景\"><a href=\"#Lambda-使用场景\" class=\"headerlink\" title=\"Lambda 使用场景\"></a>Lambda 使用场景</h4><ul>\n<li>函数式接口</li>\n</ul>\n<p><code>函数式接口</code> : 仅仅声明一个抽象方法的接口. </p>\n<blockquote>\n<p>只有在接受函数式接口的地方才可以使用<code>Lambda</code>表达式.</p>\n<p>注: Java8+ 接口可以拥有<strong>默认方法</strong>(即在类没有对方法进行实现是, 其主体为方法提供的默认实现的方法), 即使接口内定义了多个默认方法, 但抽象方法只有一个, 则接口仍是一个函数式接口.</p>\n</blockquote>\n<p><code>@FunctionalInterface</code> 注解用于标注函数式接口, 它不是必须的, 单对于函数式接口的设计, 使用它是最好的做法. 就像<code>@Override</code></p>\n<ul>\n<li>函数描述符</li>\n</ul>\n<p><code>函数式接口的抽象方法签名就是Lambda表达式的签名</code>, 我们将这种抽象方法叫<strong>函数描述符</strong></p>\n<p><code>函数式描述符</code> : 指函数式接口的抽象方法签名</p>\n<p>常用函数式接口:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">签名</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Predicate<t></t></td>\n<td style=\"text-align:left\">T -> boolean</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Consumer<t></t></td>\n<td style=\"text-align:left\">T -> void</td>\n<td style=\"text-align:left\">消费对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Function<t, r=\"\"></t,></td>\n<td style=\"text-align:left\">T -> R</td>\n<td style=\"text-align:left\">提取新的对象/抽取对象某个属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Supplier<t></t></td>\n<td style=\"text-align:left\">() -> T</td>\n<td style=\"text-align:left\">new 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UnaryOperator<t></t></td>\n<td style=\"text-align:left\">T -> T</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BinaryOperator<t></t></td>\n<td style=\"text-align:left\">( T, T ) -> T</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BiPredicate<l, r=\"\"></l,></td>\n<td style=\"text-align:left\">( L, R ) -> boolean</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BiConsumer<t, u=\"\"></t,></td>\n<td style=\"text-align:left\">( T, U ) -&gt; void</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BiFunction<t, u,=\"\" r=\"\"></t,></td>\n<td style=\"text-align:left\">( T, U ) -> R</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注为了避免装箱拆箱带来的性能损失, JDK对 <code>Predicate&lt;T&gt;</code> 和 <code>Function&lt;T,R&gt;</code>等通用函数式接口的原始类型特化: <code>IntPredicate</code>, <code>IntToLangFunction</code>等.<br>环绕执行模式( 即在方法所需的代码中间, 你需要执行点什么操作, 比如资源分配和清理)可以配合Lambda提高灵活性和重用性.<br>Lambda表达式所需要代表的类型称之为<code>目标类型</code><br>Comparator, Predicate和Function等函数式接口都有几个可以用来结合Lambda表达式的默认方法.</p>\n</blockquote>\n<ul>\n<li><p>Lambda 的类型是从使用 Lambda 的上下文推断出来的. </p>\n<blockquote>\n<p>注意: 如果 Lambda 表达式抛出一个异常, 那么抽象方法所声明的 throws 语句也必须与之匹配.</p>\n</blockquote>\n</li>\n<li><p>lambda 使用局部变量的一些限制.</p>\n<p>  lambda 函数中调用的局部变量必须声明为<code>final</code>或者事实上是<code>final</code>. </p>\n<ol>\n<li>实例变量存储在堆中, 而局部变量保存在栈上. Lambda是在一个线程中使用的, 而使用Lambda的线程, 可能会在分配该变量的线程将这个变量收回之后去访问. </li>\n<li>这一限制不鼓励你使用改变外部变量的典型命令式编程模式. 他会阻碍很容易做到的并行处理.</li>\n</ol>\n</li>\n<li><p>方法引用</p>\n<p>  方法引用让你可以重复使用现有的方法定义, 并像 Lambda 一样传递它们. 它的基本思想是: 如果以个 Lambda 代表的只是 “直接调用这个方法”, 那最好还是用名称调用它, 而不是去描述如何调用它.</p>\n<blockquote>\n<p>方法引用让你重复使用现有的方法并直接传递它们.</p>\n</blockquote>\n<p>  你可以把方法引用看做针对仅仅涉及单一方法的Lambda的语法糖.</p>\n<p>  方法引用主要有三类:</p>\n<ol>\n<li>指向<strong>静态方法</strong>的方法引用, 如, <code>Integer</code> 的 <code>parseInt</code> 方法, 写作 <code>Integer::parseInt</code>.</li>\n<li>指向<strong>任意类型实例方法</strong>的方法引用, 如 <code>String</code> 的 <code>length</code> 方法, 写作 <code>String::length</code>.</li>\n<li><p>指向<code>现有对象的实例方法</code>的方法引用.</p>\n<blockquote>\n<p>请注意, 还有针对构造函数, 数组构造函数和父类调用(super-call)的一些特殊形式的方法引用.</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>构造函数引用</p>\n<p>  对于一个现有的构造函数, 可使用: <code>ClassName :: new</code>, 如:</p>\n<p>  无参构造函数:</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Supplier&lt;Apple&gt; c1 = Apple::<span class=\"keyword\">new</span>;</div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\">Supplier&lt;Apple&gt; c1 = () -&gt; <span class=\"keyword\">new</span> Apple();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>有一个参数的构造函数:\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function&lt;Integer, Apple&gt; c2 = Apple::<span class=\"keyword\">new</span>;</div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\">Function&lt;Integer, Apple&gt; c2 = (weight) -&gt; <span class=\"keyword\">new</span> Apple(weight);</div></pre></td></tr></table></figure>\n\n\n有两个参数的构造函数:\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BiFunction&lt;String, Integer, Apple&gt; c3 = Apple::<span class=\"keyword\">new</span></div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\">BiFunction&lt;String, Integer, Apple&gt; c3 = (color, weight) -&gt; <span class=\"keyword\">new</span> Apple(color, weight);</div></pre></td></tr></table></figure>\n</code></pre><h4 id=\"函数式数据处理\"><a href=\"#函数式数据处理\" class=\"headerlink\" title=\"函数式数据处理\"></a>函数式数据处理</h4><p>流是Java API的新成员, 它允许你以声明性方式处理数据集合(通过查询语句来表示, 而不是临时编写一个实现). 此外, 流还可以透明地并行处理. </p>\n<p><code>流</code>: <strong>从支持数据处理操作的源生成的一系列元素</strong></p>\n<ul>\n<li>元素序列: 流提供一个接口, 可以访问特定元素类型的一组有序值.</li>\n<li><p>源: 流会使用一个提供数据的源. 如集合, 数组,输入/输出资源.</p>\n<blockquote>\n<p>有序集合生成流时会保留原有的顺序.</p>\n</blockquote>\n</li>\n<li><p>数据处理操作: 流的数据处理功能支持类似数据库的操作, 一级函数式编程语言中的常用操作, 如: filter, map, reduce, find, match, sort等. 流的操作可以顺序执行, 也可以并行执行.</p>\n</li>\n</ul>\n<p>流的特点:</p>\n<ul>\n<li>流水线: 流水线的操作可以看做对数据源进行数据库式查询.</li>\n<li>内部迭代: 迭代通过 <code>filter</code>, <code>map</code>, <code>sorted</code>等中间操作过滤掉了</li>\n</ul>\n<p>集合和流的差异</p>\n<ul>\n<li><p>什么时候进行计算. 集合是内存中的数据结构, 它包含数据结构中目前所有的值–集合中的每个元素都是先计算出来才能在添加到集合中的. 流则是概念上固定的数据结构(你不能添加或者删除元素), 其元素是<strong>按需计算</strong>的. 从另一个角度看, 流就像是一个延迟创建的集合; 只有在消费者需要的嘶吼才会计算值. </p>\n</li>\n<li><p>只能遍历一次. 与迭代器类似, 流只能遍历一次. 遍历完毕, 我们就说这个流已经被消费掉了. 你可以从原始数据源哪里在获取一个新的流并重新遍历一遍. 否则抛出异常: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.IllegalStateException: stream has already been operated upon or closed</div></pre></td></tr></table></figure>\n</li>\n<li><p>集合与流的迭代方式不同. 集合使用的外部迭代, 而流使用的内部迭代. </p>\n</li>\n</ul>\n<p>流的操作</p>\n<ul>\n<li><p>中间操作</p>\n<p>  中间操作不会执行任何处理. 中间操作一般可以合并起来, 在终端操作时一次性全部处理.</p>\n<ul>\n<li>短路</li>\n<li>循环合并</li>\n</ul>\n</li>\n<li><p>终端操作</p>\n<p>  终端操作会从流的流水线生成结果. </p>\n</li>\n</ul>\n<p>流的使用, 流的使用一般包含三件事:</p>\n<ul>\n<li>一个数据源(如集合)来进行一个查询</li>\n<li>一个中间操作链, 行程也难怪一条流的流水线</li>\n<li>一个终端操作, 执行流水线, 并能生成结果</li>\n</ul>\n<blockquote>\n<p>流中的元素是按需计算的.<br>流的迭代操作由外部迭代转向内部迭代.</p>\n</blockquote>\n<ul>\n<li>filter 过滤</li>\n<li>distinct 去重</li>\n<li>limit 截断 返回给定长度的流</li>\n<li>skip 跳过 跳过给定长度的元素 如果元素不足, 则返回void</li>\n<li>map 映射 将 T 转为 R </li>\n<li><strong>flatMap</strong> 将映射的流合并为一个流, 即扁平化一个流, 即, 将流中的每个值转为另一个流, 然后把所需要的流连接起来成为一个流.</li>\n<li><strong>anyMatch</strong> 判断流中是否<em>存在一个元素</em>匹配给定的谓词, <strong>终端操作</strong>, 返回 <em>boolean</em></li>\n<li><strong>allMatch</strong> 判断流中是否<em>所有元素</em>匹配给定谓词, <strong>终端操作</strong>, 返回 <em>boolean</em></li>\n<li><strong>noneMatch</strong> 与<code>allMatch</code>相反, 确保流中每个元素与谓词都不匹配. <strong>终端操作</strong>, 返回 <em>boolean</em></li>\n</ul>\n<blockquote>\n<p><code>anyMatch</code>, <code>allMatch</code>, <code>noneMatch</code>三个操作都是用到我们所谓的<strong>短路</strong>, 就是Java中的<code>&amp;&amp;</code>和<code>||</code>运算符的短路在流中的版本.<br>短路:指不需要处理完所有表达式, 只需要找到一个表达式为false, 则整个表达式都将返回false.<br>短路对无限大小流非常有用, 可以将无限流变为有限流. </p>\n</blockquote>\n<ul>\n<li><strong>findAny</strong> 返回当前流中任意元素, 与其他流操作结合使用. <strong>终端操作</strong>, 返回<em>Optional<t></t></em></li>\n</ul>\n<blockquote>\n<p><code>Optional&lt;T&gt;</code>类是Java8的容器类. 代表一个值存在或者不存在.<br><code>isPresent()</code>: 包含值时返回 true<br><code>isPresent(Consumer&lt;T&gt; block)</code>: 包含值时执行给定代码块.<br><code>T get()</code>: 值存在时返回值, 否则抛出异常<code>NoSuchElement</code>.<br><code>T orElse(T other)</code>: 值存在时返回值, 否则返回一个默认值(other).</p>\n</blockquote>\n<ul>\n<li><strong>findFirst()</strong> 返回第一个元素. 与其他流操作结合使用. <strong>终端操作</strong>, 返回<em>Optional<t></t></em></li>\n</ul>\n<blockquote>\n<p>何时使用<code>findFirst</code>和<code>findAny</code>? 并行时, <code>findFirst</code>在并行上限制更多, 如果不关心返回元素是那个, 使用<code>findAny</code>, 因为它在使用并行流时限制较少.</p>\n</blockquote>\n<ul>\n<li><strong>reduce</strong> 归约操作. 此操作有两个版本, 包含初始值, 及不包含初始值的, 两个版本的返回值不同, 不包含初始值的返回值为<code>Optional</code>类型. 除了合并结果, 对结果就求最大, 最小值, 数元素个数等等.</li>\n</ul>\n<blockquote>\n<p>流的操作分为<em>有状态</em>和<em>无状态</em>两种. </p>\n</blockquote>\n<p>数值流</p>\n<p>对int等原始类型的, map方法生成的包转类型的流, 存在装箱拆箱成本.</p>\n<ul>\n<li><p>原始类型特化流: <code>IntStream</code>, <code>DoubleStream</code>, <code>LongStream</code>. 避免了装箱拆箱成本. 且每个接口都带来了进行常用数值归约的新方法. 如: <code>max</code>, <code>sum</code>, <code>min</code>等, 必要时还可以将原始类型特化流转为对象流. </p>\n<blockquote>\n<p>特化原因: 不在于流的复杂性, 而是装箱造成的复杂性, 即类似<code>int</code>和<code>Integer</code>之间的效率差异.</p>\n</blockquote>\n</li>\n<li><p>映射到数值流: <code>mapToInt</code>, <code>mapToDouble</code>, <code>mapToLong</code></p>\n</li>\n<li>转回对象流: <code>boxed()</code></li>\n<li>默认值<code>OptionalInt</code></li>\n</ul>\n<p>数值范围</p>\n<p>Java8引入了两个用于 <code>IntStream</code> 和 <code>LongStream</code> 的静态方法, 可用于生成数值范围: <code>range</code> 和 <code>rangeClosed</code>. 这两个方法都是: 第一个参数接收起始位置, 第二个参数接收结束位置. 区别在于:<br><code>range</code>方法不包含<em>结束位置</em>, <code>rangeClosed</code>方法包含<em>结束位置</em>.</p>\n<p>构建流</p>\n<ul>\n<li><p>由值创建流</p>\n<ul>\n<li><code>Stream.of()</code> 显示创建流</li>\n</ul>\n</li>\n<li><p>由数组创建流</p>\n<ul>\n<li><code>Arrays.stream()</code></li>\n</ul>\n</li>\n<li><p>由文件生成流</p>\n<p>  Java 中用于处理文件等 I/O 操作的 NIO API 已更新, 以便利用 Stream API. <code>java.nio.file.Files</code>中很多静态方法都会返回一个流. </p>\n</li>\n<li><p>由函数生成无限流</p>\n<p>  Stream API提供两个静态方法来从函数生成无限流: <code>Stream.iterate</code> 和 <code>Stream.generate</code> 这连个操作可以创建所谓的<strong>无限流</strong>.</p>\n<p>  无限流: 不像固定集合创建的流那样有固定大小的流. 由 iterate 和 generate 产生的流会用给定函数按需创建值, 因此可以无穷无尽的计算下去!!!, </p>\n<blockquote>\n<p>注: 一般来说, 应该使用 <code>limit(N)</code> 来对这种流加以限制, 以避免打印无穷多个值.</p>\n</blockquote>\n<ul>\n<li><p><code>iterate</code> 方法接受一个初始值, 还有一个依次应用在每个产生的新值上的 Lambda函数. </p>\n<blockquote>\n<p>一般来说: 在需要依次生成一系列值的时候应该使用<code>iterate</code>.</p>\n</blockquote>\n</li>\n<li><p><code>generate</code> 方法不是依次对每个新生成的值应用函数, 它接收一个<code>Supplier&lt;T&gt;</code>类型的Lambda提供的新值.</p>\n<p>总结</p>\n</li>\n<li><p>可使用 <code>filter</code>, <code>distinct</code>, <code>skip</code>, <code>limit</code>对流进行筛选或切片</p>\n</li>\n<li>可使用 <code>map</code>, <code>flatMap</code>转换流.</li>\n<li>可使用 <code>findFirst</code> 和 <code>findAny</code>方法查找流中的元素.</li>\n<li><p>可使用 <code>anyMatch</code>, <code>noneMatch</code> 和 <code>allMatch</code> 方法让流匹配给定谓词.</p>\n<blockquote>\n<p>这些流都利用了短路: 找到结果立即停止计算; 没有必要处理真个流</p>\n</blockquote>\n</li>\n<li><p>可使用 <code>reduce</code> 方法将流中的元素迭代合并成一个结果. 如求和, 最大值等</p>\n</li>\n<li><code>filter</code> 和 <code>map</code>等操作是无状态的. 他们并不存储任何状态. </li>\n<li><code>reduce</code>等操作要存储状态才能计算一个值. <code>sorted</code> 和 <code>distinct</code>等操作也要存储状态, 因为他们需要把流中的所有元素缓存起来才能返回一个新的流. 这种操作也叫做有状态操作. </li>\n<li>流由三种基本原始类型特化: <code>IntStream</code>, <code>DoubleStream</code> 和 <code>LongStream</code>. 他们的操作也有相应的特化.</li>\n<li>流不仅可以从集合创建, 也可以从值, 数组, 文件以及<code>iterate</code>与<code>generate</code>等特定方法创建.</li>\n<li>无限流是没有固定大小的流.</li>\n</ul>\n</li>\n</ul>\n<p>用流收集数据</p>\n<p>流支持两种操作: <code>中间操作</code> 和 <code>终端操作</code>. 中间操作可以链接起来, 将一个流转为另一个流. 这些操作不会消耗流, 其目的是建立一个流水线. 终端操作会消耗流, 以产生一个最终结果, 如返回一个集合, 一个最大元素.</p>\n<p>收集器(Collector)</p>\n<p>预定义收集器的三大功能:</p>\n<ul>\n<li>将流元素归约和汇总为一个值</li>\n<li>元素分组</li>\n<li><p>元素分区</p>\n</li>\n<li><p><code>Collectors.counting()</code></p>\n</li>\n<li><code>Collectors.summingInt()</code></li>\n<li><code>Collectors.averagingInt()</code></li>\n<li><code>Collectors.summarizingInt()</code>: 通过一次 <code>summarizing</code> 操作你可以得到: 总和, 平均值, 最大值, 最下值.</li>\n</ul>\n<p>连接字符串</p>\n<ul>\n<li><code>Collectors.joining()</code></li>\n</ul>\n<p>收集(collect)和归约(reduce)</p>\n<ul>\n<li>reduce()方法旨在: 把两个值结合起来生成一个新值, 它是一个不可变的归约. </li>\n<li>collect()方法的设计就是要改变容器, 从而累积要输出的结果. </li>\n</ul>\n<p>分组</p>\n<ul>\n<li><code>Collectors.groupingBy()</code></li>\n<li><code>Collectors.collectingAndThen</code></li>\n<li><code>Collectors.mapping()</code></li>\n<li><code>Collectors.toCollection()</code></li>\n</ul>\n<p>分区</p>\n<p>分区是分组的特殊情况: 有一个谓词(返回一个布尔值的函数)作为分类函数, 它称之为分区函数. 分区函数返回一个布尔值, 这意味着得到的分组 Map 的键类型是 <code>Boolean</code>, 于是它最多分为两组, <code>true</code>是一组, <code>false</code>是一组. </p>\n<ul>\n<li><code>Collectors.partitioningBy</code>: 参数需要一个谓词(即: 返回一个布尔值的函数)</li>\n</ul>\n<p>分区的优势</p>\n<p>分区的好处在于: 保留了分区函数返回 <code>true</code> 或 <code>false</code> 的两套流元素列表. </p>\n<p><code>Collectors</code> 类的静态工厂方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">工厂方法</th>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p><code>toList</code> | <code>List&lt;T&gt;</code> | 把流中的所有项目收集到一个List<br><code>toSet</code> | <code>Set&lt;T&gt;</code> | 把流中的所有项目收集到一个Set, 删除重复项<br><code>toCollection</code> | <code>Collection&lt;T&gt;</code> | 把流中所有项目收集到给定的供应源创建的集合<br><code>counting</code> | <code>Long</code> | 计算流中的元素个数<br><code>summingInt</code> | <code>Integer</code> | 对流中项目的一个整数属性求和<br><code>averagingInt</code> | <code>Double</code> | 对有种项目的一个整数数据求平均值<br><code>summarizingInt</code> | <code>IntSummaryStatistics</code> | 收集关于流中项目<code>Integer</code>属性的统计值, 例如最大, 最小, 总和与平均值.<br><code>joining</code> | <code>String</code> | 连接流中每个元素, 对每个元素调用 <code>toString</code> 方法所生成的字符串进行连接<br><code>maxBy</code> | <code>Optional&lt;T&gt;</code> | 一个包裹了流中按照给定比较器选出最大元素的 <code>Optional</code><br><code>minBy</code> | <code>Optional&lt;T&gt;</code> | 同上求最小值<br><code>reducing</code> | 归约操作产生的类型 | 从一个作为累加器的初始值开始, 利用<code>BinaryOperator</code>与流中的元素逐个结合, 从而将流归约为单个值.<br><code>collectingAndThen</code> | 转换函数返回的类型 | 包含另一个收集器, 对其结果应用转换函数.<br><code>groupingBy</code> | <code>Map&lt;K, List&lt;T&gt;&gt;</code> | 根据项目的一个属性的值对流中的项目作问组, 并将属性值最为结果Map的键<br><code>partitioningBy</code> | <code>Map&lt;Boolean, List&lt;T&gt;&gt;</code> | 根据对流中每个项目应用谓词的结果来对项目进行分区</p>\n<p>收集器接口</p>\n<p>Collector接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collector</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">A</span>, <span class=\"title\">R</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">Supplier&lt;A&gt; <span class=\"title\">supplier</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">BiConsumer&lt;A, T&gt; <span class=\"title\">accumulator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">Function&lt;A, R&gt; <span class=\"title\">finisher</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">BinaryOperator&lt;A&gt; <span class=\"title\">combiner</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">Set&lt;Characteristics&gt; <span class=\"title\">characteristics</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>T 是流中要收集的项目泛型</li>\n<li>A 是累加器的类型, 累加器是在收集过程中用于累积部分结果的对象</li>\n<li>R 是收集操作得到的对象(通常但并不一定是集合)的类型.</li>\n</ul>\n<p>前面四个方法都会返回一个会被 <code>collect</code> 方法调用的函数, 而第五个方法 <code>characteristics</code> 则提供了一系列特征, 也就是一个提示列表, 告诉 <code>collect</code> 方法在执行归约操作的时候可以应用那些优化(比如并行化).</p>\n<ul>\n<li><p>建立新的结果容器: <code>supplier</code> 方法</p>\n<p>  <code>supplier</code> 方法必须放回一个结果为空的 <code>Supplier</code>, 也就是一个无参的构造函数, 在调用时它会创建一个空的累加器实例, 提供数据收集过程使用. </p>\n</li>\n<li><p>将元素添加到结果容器: <code>accumulator</code> 方法</p>\n<p>  <code>accumulator</code> 方法会返回执行归约操作的函数. 当遍历到流中第 <code>n</code> 个元素时, 这个函数执行时会有两个参数: 保存归约结果的累加器(已收集了流中前 <code>n-1</code> 个元素), 还有第 <code>n</code> 个元素本身. 该函数将返回 <code>void</code>, 因为累加器是原位更新, 即<em>函数的执行改变了它的内部状态以体现遍历的元素的效果</em>. </p>\n</li>\n<li><p>对结果容器应用最终转换: <code>finisher</code> 方法</p>\n<p>  在遍历完流后, <code>finisher</code> 方法必须返回在累积过程的最后要调用的一个函数, 以便将累加器对象转换为整个集合操作的最终结果. 通常, 累加器对象(<code>accumulator</code> 方法返回)恰好符合预期的最终结果, 因此无需进行转换. 所以 <code>finisher</code> 方法只需返回 <code>Function</code> 接口的静态方法 <code>identity</code> 函数. </p>\n</li>\n</ul>\n<p>以上三个方法已经足以对流进行顺序归约. </p>\n<p><img src=\"https://image.fuxiao86.com/14876400532202.jpg\" alt=\"-w2280\"></p>\n<ul>\n<li><p>合并两个结果容器: <code>combiner</code> 方法</p>\n<p>  <code>combiner</code> 方法会返回一个供归约操作使用的函数, 它定义了对流的各个子部分进行并行处理时, 各个子部分归约所得的累加器要如何合并. </p>\n<p>  有了这第四个方法, 就可以对流进行并行归约了. 它会用到JAVA7中引入的<em>分支/合并框架</em>和<em>Spliterator</em>抽象. </p>\n<p>  <img src=\"https://image.fuxiao86.com/14876413432867.jpg\" alt=\"-w1209\"></p>\n</li>\n<li><p><code>characteristics</code> 方法</p>\n<p>  <code>characteristics</code> 会返回一个不可变的 <code>Characteristics</code> 集合, 它定义了收集器的行为 - 尤其是关于流是否可以并行归约, 以及可以使用那些优化的提示. </p>\n<p>  <code>Characteristics</code> 是一个包含三个项目的枚举.</p>\n<ul>\n<li><code>UNORDERED</code>: 归约结果不受流中项目的遍历和累积顺序的影响.</li>\n<li><code>CONCURRENT</code>: <code>accumulator</code>函数可以从多个线程同时调用, 且该收集器可以并行归约流. 如果收集器没有标记为 <code>UNORDERED</code>, 那它仅在用于无序数据源时才可以并行归约. </li>\n<li><code>IDENTITY_FINISH</code>: 这表明完成器方法返回的函数是一个恒等函数, 可以跳过. 这种情况下累加器对象将会直接用作归约过程的最终结果. 这也意味着, 将累加器A不加检查地转换为结果R是安全的.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code>Collections.emptyList()</code> 获取一个空的 List</p>\n</blockquote>\n<p>小结</p>\n<ul>\n<li><code>collect</code> 是一个终端操作, 它接受的参数时将流中的元素累积到汇总结果的各种方式(称为收集器).</li>\n<li>预定义收集器包括: 将流元素归约和汇总到一个值, 例如计算最小值, 最大值或平均值.</li>\n<li>预定义收集器可以用<code>groupingBy</code> 对流中元素进行分组, 或用<code>partitioningBy</code>进行分区.</li>\n<li>收集器可以高效地复合起来, 进行多级分组, 分区和归约.</li>\n<li>可以自定义实现<code>Collector</code> 接口中定义的方法来开发自己的收集器.</li>\n</ul>\n<p>并行数据处理及性能</p>\n<ul>\n<li><p>并行流</p>\n<p>  并行流: 是一个把内容分成多个数据块, 并且不同的线程分别处理每个数据块的流.</p>\n<p>  可以通过对收集源调用<code>parallelStream</code> 方法来把集合转为并行流.</p>\n<ul>\n<li>对流调用 <code>parallel()</code> 方法可以转为并行流</li>\n<li><p>对并行流调用<code>sequential()</code> 方法可以转为顺序流</p>\n<p>并行流内部使用了默认的<code>ForkJoinPool</code>, 它默认的线程数量就是运行机器的处理器数量, 这个值是由<code>Runtime.getRuntime().availableProcessors()</code>得到. 但可以通过系统属性: <code>java.util.concurrent.ForkJoinPool.common.parallelism</code> 来改变线程池大小.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.setProperty(<span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>, <span class=\"number\">12</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>这是一个全局设置, 因此它将影响代码中所有的并行流. 反过来目前还无法转为某个并行流指定这个值. 一般而言, 让` ForkJoinPool` 的大小等于处理器的数量是个不错的默认值.\n\n&gt; iterate 很难分割成能够独立执行的小块, 因为每次应用这个函数都有依赖前一次应用的结果.\n\n&gt; 共享可变状态会影响并行流以及并行计算. 所以**避免共享可变状态**\n\n高效的使用并行流\n\n* 如果对并行效率有疑问, 请测试运算时间.\n* 注意装箱拆箱操作. 自动装箱机拆箱会大大降低性能.\n* 有些操作本身在并行流上的性能就比顺序流差. 特别是 `limit` 和 `findFirst` 等依赖于元素顺序的操作. 他们在并行流上执行的代价非常大. `findAny` 会比 `findFirst` 性能好. 可以通过调用 `unordered` 方法来把有序流变成无序流. 对无序并行流调用 `limit` 可能会比单个有序流更高效.\n* 并行成本 = N*Q. N: 要处理的元素总数, Q: 一个元素通过流水线的大致处理成本. Q值越高, 意味着并行流性能好的可能性比较大.\n* 对于较小的数据量, 选择并行流几乎从来都不是一个好的决定. 并行处理少数几个元素的好处抵不上并行化造成的额外开销.\n* 需要考虑流背后的数据结构是否易于分解. 如: AarrayList 的拆分效率比 LinkedList 高的多, 因为前者用不着遍历就可以平均拆分, 而后者必须遍历. \n* 流自身的特点, 以及流水线中的中间操作修改流的方式, 都可能改变分解过程的性能. \n* 还需要考虑终端操作中合并步骤的代价高低. 如 `Collector` 中的 `combiner` 方法.\n\n分支/合并框架\n\n* RecursiveTask&lt;R&gt;/RecursiveAction\n\n    R 是并行化产生的结果类型. 如果任务不返回结果, 则是用 `RecursiveAction`\n\n* Fork/Join 框架的工作窃取技术\n* Spliterator 接口.  可分迭代器. 用来遍历数据源中数据, 但它是为了并行执行而设计的. \n\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Spliterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryAdvance</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span>;</div><div class=\"line\">    <span class=\"function\">Spliterator&lt;T&gt; <span class=\"title\">trySplit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">estmateSize</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">characteristics</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n\n    * T 是 Spliterator 遍历的元素的类型\n    * tryAdvance 方法的行为类似于普通的 Iterator, 因为它会按顺序一个一个使用 Spliterator 中的元素, 并且如果还有其他元素要遍历就返回 true\n    * trySplit 是装为 Spliterator 接口设计的, 因为它可以把一些元素划出去分给第二个 Spliterator( 由该方法返回), 让它们两个并行处理. \n    * Spliterator 通过 estimateSize 方法估计还剩多少元素要遍历\n    * characteristics抽象方法, 返回一个 int, 代表Spliterator 本身特性集的编码. 使用 Spliterator 的客户可以使用这些特性来更好地控制和优化它.\n\n    ![-w1422](https://image.fuxiao86.com/14876646717073.jpg)\n</code></pre>","excerpt":"","more":"<h1 id=\"Java8-实战学习笔记\"><a href=\"#Java8-实战学习笔记\" class=\"headerlink\" title=\"Java8 实战学习笔记\"></a>Java8 实战学习笔记</h1><h2 id=\"第二章-通过行为参数化传递代码\"><a href=\"#第二章-通过行为参数化传递代码\" class=\"headerlink\" title=\"第二章 通过行为参数化传递代码\"></a>第二章 通过行为参数化传递代码</h2><p><code>行为参数化</code> 帮助处理 <em>频繁变更需求</em> 的一种软件开发模式. </p>\n<p><code>Predicate</code>: 断言, 陈述. 签名: boolean test()</p>\n<h2 id=\"第三章-Lambda表达式\"><a href=\"#第三章-Lambda表达式\" class=\"headerlink\" title=\"第三章 Lambda表达式\"></a>第三章 Lambda表达式</h2><p><code>Lambda表达式</code>: 可以理解为一种匿名函数. 没有名称, 但是有参数列表, 函数主体, 返回类型. 可能还有一个可以抛出异常的异常列表.</p>\n<p><code>Lambda表达式</code>可以让你简洁的传递代码.</p>\n<p><code>Lambda表达式</code>三部分:</p>\n<ul>\n<li>参数列表</li>\n<li>箭头 -&gt;</li>\n<li>lambda主体</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">使用案例</th>\n<th style=\"text-align:left\">Lambda示例</th>\n<th style=\"text-align:left\">对应函数接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">布尔表达式</td>\n<td style=\"text-align:left\">(List<String list) \\-\\> list.isEmpty()</td>\n<td style=\"text-align:left\">Predicate<List<String>&gt;</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">创建对象</td>\n<td style=\"text-align:left\">(&nbsp;&nbsp;) -> new Apple(10)</td>\n<td style=\"text-align:left\">Supplier<Apple></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消费一个对象</td>\n<td style=\"text-align:left\">(Apple a) -> {<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a.getWeight()); <br>   }</td>\n<td style=\"text-align:left\">Consumer<Apple></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">从一个对象中选择/抽取</td>\n<td style=\"text-align:left\">(String s) -> s.length()</td>\n<td style=\"text-align:left\">Function<String, Integer> 或 ToIntFunction<String></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">结合两个值</td>\n<td style=\"text-align:left\">(int a, int b) -> a * b</td>\n<td style=\"text-align:left\">IntBinaryOparator</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">比较两个对象</td>\n<td style=\"text-align:left\">(Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight())</td>\n<td style=\"text-align:left\">BiFunction<Apple, Apple, Integer> 或 ToIntBiFunction<Apple, Apple></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Lambda-使用场景\"><a href=\"#Lambda-使用场景\" class=\"headerlink\" title=\"Lambda 使用场景\"></a>Lambda 使用场景</h4><ul>\n<li>函数式接口</li>\n</ul>\n<p><code>函数式接口</code> : 仅仅声明一个抽象方法的接口. </p>\n<blockquote>\n<p>只有在接受函数式接口的地方才可以使用<code>Lambda</code>表达式.</p>\n<p>注: Java8+ 接口可以拥有<strong>默认方法</strong>(即在类没有对方法进行实现是, 其主体为方法提供的默认实现的方法), 即使接口内定义了多个默认方法, 但抽象方法只有一个, 则接口仍是一个函数式接口.</p>\n</blockquote>\n<p><code>@FunctionalInterface</code> 注解用于标注函数式接口, 它不是必须的, 单对于函数式接口的设计, 使用它是最好的做法. 就像<code>@Override</code></p>\n<ul>\n<li>函数描述符</li>\n</ul>\n<p><code>函数式接口的抽象方法签名就是Lambda表达式的签名</code>, 我们将这种抽象方法叫<strong>函数描述符</strong></p>\n<p><code>函数式描述符</code> : 指函数式接口的抽象方法签名</p>\n<p>常用函数式接口:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">签名</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Predicate<T></td>\n<td style=\"text-align:left\">T -> boolean</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Consumer<T></td>\n<td style=\"text-align:left\">T -> void</td>\n<td style=\"text-align:left\">消费对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Function<T, R></td>\n<td style=\"text-align:left\">T -> R</td>\n<td style=\"text-align:left\">提取新的对象/抽取对象某个属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Supplier<T></td>\n<td style=\"text-align:left\">() -> T</td>\n<td style=\"text-align:left\">new 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UnaryOperator<T></td>\n<td style=\"text-align:left\">T -> T</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BinaryOperator<T></td>\n<td style=\"text-align:left\">( T, T ) -> T</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BiPredicate<L, R></td>\n<td style=\"text-align:left\">( L, R ) -> boolean</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BiConsumer<T, U></td>\n<td style=\"text-align:left\">( T, U ) -&gt; void</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BiFunction<T, U, R></td>\n<td style=\"text-align:left\">( T, U ) -> R</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注为了避免装箱拆箱带来的性能损失, JDK对 <code>Predicate&lt;T&gt;</code> 和 <code>Function&lt;T,R&gt;</code>等通用函数式接口的原始类型特化: <code>IntPredicate</code>, <code>IntToLangFunction</code>等.<br>环绕执行模式( 即在方法所需的代码中间, 你需要执行点什么操作, 比如资源分配和清理)可以配合Lambda提高灵活性和重用性.<br>Lambda表达式所需要代表的类型称之为<code>目标类型</code><br>Comparator, Predicate和Function等函数式接口都有几个可以用来结合Lambda表达式的默认方法.</p>\n</blockquote>\n<ul>\n<li><p>Lambda 的类型是从使用 Lambda 的上下文推断出来的. </p>\n<blockquote>\n<p>注意: 如果 Lambda 表达式抛出一个异常, 那么抽象方法所声明的 throws 语句也必须与之匹配.</p>\n</blockquote>\n</li>\n<li><p>lambda 使用局部变量的一些限制.</p>\n<p>  lambda 函数中调用的局部变量必须声明为<code>final</code>或者事实上是<code>final</code>. </p>\n<ol>\n<li>实例变量存储在堆中, 而局部变量保存在栈上. Lambda是在一个线程中使用的, 而使用Lambda的线程, 可能会在分配该变量的线程将这个变量收回之后去访问. </li>\n<li>这一限制不鼓励你使用改变外部变量的典型命令式编程模式. 他会阻碍很容易做到的并行处理.</li>\n</ol>\n</li>\n<li><p>方法引用</p>\n<p>  方法引用让你可以重复使用现有的方法定义, 并像 Lambda 一样传递它们. 它的基本思想是: 如果以个 Lambda 代表的只是 “直接调用这个方法”, 那最好还是用名称调用它, 而不是去描述如何调用它.</p>\n<blockquote>\n<p>方法引用让你重复使用现有的方法并直接传递它们.</p>\n</blockquote>\n<p>  你可以把方法引用看做针对仅仅涉及单一方法的Lambda的语法糖.</p>\n<p>  方法引用主要有三类:</p>\n<ol>\n<li>指向<strong>静态方法</strong>的方法引用, 如, <code>Integer</code> 的 <code>parseInt</code> 方法, 写作 <code>Integer::parseInt</code>.</li>\n<li>指向<strong>任意类型实例方法</strong>的方法引用, 如 <code>String</code> 的 <code>length</code> 方法, 写作 <code>String::length</code>.</li>\n<li><p>指向<code>现有对象的实例方法</code>的方法引用.</p>\n<blockquote>\n<p>请注意, 还有针对构造函数, 数组构造函数和父类调用(super-call)的一些特殊形式的方法引用.</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>构造函数引用</p>\n<p>  对于一个现有的构造函数, 可使用: <code>ClassName :: new</code>, 如:</p>\n<p>  无参构造函数:</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Supplier&lt;Apple&gt; c1 = Apple::<span class=\"keyword\">new</span>;</div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\">Supplier&lt;Apple&gt; c1 = () -&gt; <span class=\"keyword\">new</span> Apple();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>有一个参数的构造函数:\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function&lt;Integer, Apple&gt; c2 = Apple::<span class=\"keyword\">new</span>;</div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\">Function&lt;Integer, Apple&gt; c2 = (weight) -&gt; <span class=\"keyword\">new</span> Apple(weight);</div></pre></td></tr></table></figure>\n\n\n有两个参数的构造函数:\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BiFunction&lt;String, Integer, Apple&gt; c3 = Apple::<span class=\"keyword\">new</span></div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\">BiFunction&lt;String, Integer, Apple&gt; c3 = (color, weight) -&gt; <span class=\"keyword\">new</span> Apple(color, weight);</div></pre></td></tr></table></figure>\n</code></pre><h4 id=\"函数式数据处理\"><a href=\"#函数式数据处理\" class=\"headerlink\" title=\"函数式数据处理\"></a>函数式数据处理</h4><p>流是Java API的新成员, 它允许你以声明性方式处理数据集合(通过查询语句来表示, 而不是临时编写一个实现). 此外, 流还可以透明地并行处理. </p>\n<p><code>流</code>: <strong>从支持数据处理操作的源生成的一系列元素</strong></p>\n<ul>\n<li>元素序列: 流提供一个接口, 可以访问特定元素类型的一组有序值.</li>\n<li><p>源: 流会使用一个提供数据的源. 如集合, 数组,输入/输出资源.</p>\n<blockquote>\n<p>有序集合生成流时会保留原有的顺序.</p>\n</blockquote>\n</li>\n<li><p>数据处理操作: 流的数据处理功能支持类似数据库的操作, 一级函数式编程语言中的常用操作, 如: filter, map, reduce, find, match, sort等. 流的操作可以顺序执行, 也可以并行执行.</p>\n</li>\n</ul>\n<p>流的特点:</p>\n<ul>\n<li>流水线: 流水线的操作可以看做对数据源进行数据库式查询.</li>\n<li>内部迭代: 迭代通过 <code>filter</code>, <code>map</code>, <code>sorted</code>等中间操作过滤掉了</li>\n</ul>\n<p>集合和流的差异</p>\n<ul>\n<li><p>什么时候进行计算. 集合是内存中的数据结构, 它包含数据结构中目前所有的值–集合中的每个元素都是先计算出来才能在添加到集合中的. 流则是概念上固定的数据结构(你不能添加或者删除元素), 其元素是<strong>按需计算</strong>的. 从另一个角度看, 流就像是一个延迟创建的集合; 只有在消费者需要的嘶吼才会计算值. </p>\n</li>\n<li><p>只能遍历一次. 与迭代器类似, 流只能遍历一次. 遍历完毕, 我们就说这个流已经被消费掉了. 你可以从原始数据源哪里在获取一个新的流并重新遍历一遍. 否则抛出异常: </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.IllegalStateException: stream has already been operated upon or closed</div></pre></td></tr></table></figure>\n</li>\n<li><p>集合与流的迭代方式不同. 集合使用的外部迭代, 而流使用的内部迭代. </p>\n</li>\n</ul>\n<p>流的操作</p>\n<ul>\n<li><p>中间操作</p>\n<p>  中间操作不会执行任何处理. 中间操作一般可以合并起来, 在终端操作时一次性全部处理.</p>\n<ul>\n<li>短路</li>\n<li>循环合并</li>\n</ul>\n</li>\n<li><p>终端操作</p>\n<p>  终端操作会从流的流水线生成结果. </p>\n</li>\n</ul>\n<p>流的使用, 流的使用一般包含三件事:</p>\n<ul>\n<li>一个数据源(如集合)来进行一个查询</li>\n<li>一个中间操作链, 行程也难怪一条流的流水线</li>\n<li>一个终端操作, 执行流水线, 并能生成结果</li>\n</ul>\n<blockquote>\n<p>流中的元素是按需计算的.<br>流的迭代操作由外部迭代转向内部迭代.</p>\n</blockquote>\n<ul>\n<li>filter 过滤</li>\n<li>distinct 去重</li>\n<li>limit 截断 返回给定长度的流</li>\n<li>skip 跳过 跳过给定长度的元素 如果元素不足, 则返回void</li>\n<li>map 映射 将 T 转为 R </li>\n<li><strong>flatMap</strong> 将映射的流合并为一个流, 即扁平化一个流, 即, 将流中的每个值转为另一个流, 然后把所需要的流连接起来成为一个流.</li>\n<li><strong>anyMatch</strong> 判断流中是否<em>存在一个元素</em>匹配给定的谓词, <strong>终端操作</strong>, 返回 <em>boolean</em></li>\n<li><strong>allMatch</strong> 判断流中是否<em>所有元素</em>匹配给定谓词, <strong>终端操作</strong>, 返回 <em>boolean</em></li>\n<li><strong>noneMatch</strong> 与<code>allMatch</code>相反, 确保流中每个元素与谓词都不匹配. <strong>终端操作</strong>, 返回 <em>boolean</em></li>\n</ul>\n<blockquote>\n<p><code>anyMatch</code>, <code>allMatch</code>, <code>noneMatch</code>三个操作都是用到我们所谓的<strong>短路</strong>, 就是Java中的<code>&amp;&amp;</code>和<code>||</code>运算符的短路在流中的版本.<br>短路:指不需要处理完所有表达式, 只需要找到一个表达式为false, 则整个表达式都将返回false.<br>短路对无限大小流非常有用, 可以将无限流变为有限流. </p>\n</blockquote>\n<ul>\n<li><strong>findAny</strong> 返回当前流中任意元素, 与其他流操作结合使用. <strong>终端操作</strong>, 返回<em>Optional<T></em></li>\n</ul>\n<blockquote>\n<p><code>Optional&lt;T&gt;</code>类是Java8的容器类. 代表一个值存在或者不存在.<br><code>isPresent()</code>: 包含值时返回 true<br><code>isPresent(Consumer&lt;T&gt; block)</code>: 包含值时执行给定代码块.<br><code>T get()</code>: 值存在时返回值, 否则抛出异常<code>NoSuchElement</code>.<br><code>T orElse(T other)</code>: 值存在时返回值, 否则返回一个默认值(other).</p>\n</blockquote>\n<ul>\n<li><strong>findFirst()</strong> 返回第一个元素. 与其他流操作结合使用. <strong>终端操作</strong>, 返回<em>Optional<T></em></li>\n</ul>\n<blockquote>\n<p>何时使用<code>findFirst</code>和<code>findAny</code>? 并行时, <code>findFirst</code>在并行上限制更多, 如果不关心返回元素是那个, 使用<code>findAny</code>, 因为它在使用并行流时限制较少.</p>\n</blockquote>\n<ul>\n<li><strong>reduce</strong> 归约操作. 此操作有两个版本, 包含初始值, 及不包含初始值的, 两个版本的返回值不同, 不包含初始值的返回值为<code>Optional</code>类型. 除了合并结果, 对结果就求最大, 最小值, 数元素个数等等.</li>\n</ul>\n<blockquote>\n<p>流的操作分为<em>有状态</em>和<em>无状态</em>两种. </p>\n</blockquote>\n<p>数值流</p>\n<p>对int等原始类型的, map方法生成的包转类型的流, 存在装箱拆箱成本.</p>\n<ul>\n<li><p>原始类型特化流: <code>IntStream</code>, <code>DoubleStream</code>, <code>LongStream</code>. 避免了装箱拆箱成本. 且每个接口都带来了进行常用数值归约的新方法. 如: <code>max</code>, <code>sum</code>, <code>min</code>等, 必要时还可以将原始类型特化流转为对象流. </p>\n<blockquote>\n<p>特化原因: 不在于流的复杂性, 而是装箱造成的复杂性, 即类似<code>int</code>和<code>Integer</code>之间的效率差异.</p>\n</blockquote>\n</li>\n<li><p>映射到数值流: <code>mapToInt</code>, <code>mapToDouble</code>, <code>mapToLong</code></p>\n</li>\n<li>转回对象流: <code>boxed()</code></li>\n<li>默认值<code>OptionalInt</code></li>\n</ul>\n<p>数值范围</p>\n<p>Java8引入了两个用于 <code>IntStream</code> 和 <code>LongStream</code> 的静态方法, 可用于生成数值范围: <code>range</code> 和 <code>rangeClosed</code>. 这两个方法都是: 第一个参数接收起始位置, 第二个参数接收结束位置. 区别在于:<br><code>range</code>方法不包含<em>结束位置</em>, <code>rangeClosed</code>方法包含<em>结束位置</em>.</p>\n<p>构建流</p>\n<ul>\n<li><p>由值创建流</p>\n<ul>\n<li><code>Stream.of()</code> 显示创建流</li>\n</ul>\n</li>\n<li><p>由数组创建流</p>\n<ul>\n<li><code>Arrays.stream()</code></li>\n</ul>\n</li>\n<li><p>由文件生成流</p>\n<p>  Java 中用于处理文件等 I/O 操作的 NIO API 已更新, 以便利用 Stream API. <code>java.nio.file.Files</code>中很多静态方法都会返回一个流. </p>\n</li>\n<li><p>由函数生成无限流</p>\n<p>  Stream API提供两个静态方法来从函数生成无限流: <code>Stream.iterate</code> 和 <code>Stream.generate</code> 这连个操作可以创建所谓的<strong>无限流</strong>.</p>\n<p>  无限流: 不像固定集合创建的流那样有固定大小的流. 由 iterate 和 generate 产生的流会用给定函数按需创建值, 因此可以无穷无尽的计算下去!!!, </p>\n<blockquote>\n<p>注: 一般来说, 应该使用 <code>limit(N)</code> 来对这种流加以限制, 以避免打印无穷多个值.</p>\n</blockquote>\n<ul>\n<li><p><code>iterate</code> 方法接受一个初始值, 还有一个依次应用在每个产生的新值上的 Lambda函数. </p>\n<blockquote>\n<p>一般来说: 在需要依次生成一系列值的时候应该使用<code>iterate</code>.</p>\n</blockquote>\n</li>\n<li><p><code>generate</code> 方法不是依次对每个新生成的值应用函数, 它接收一个<code>Supplier&lt;T&gt;</code>类型的Lambda提供的新值.</p>\n<p>总结</p>\n</li>\n<li><p>可使用 <code>filter</code>, <code>distinct</code>, <code>skip</code>, <code>limit</code>对流进行筛选或切片</p>\n</li>\n<li>可使用 <code>map</code>, <code>flatMap</code>转换流.</li>\n<li>可使用 <code>findFirst</code> 和 <code>findAny</code>方法查找流中的元素.</li>\n<li><p>可使用 <code>anyMatch</code>, <code>noneMatch</code> 和 <code>allMatch</code> 方法让流匹配给定谓词.</p>\n<blockquote>\n<p>这些流都利用了短路: 找到结果立即停止计算; 没有必要处理真个流</p>\n</blockquote>\n</li>\n<li><p>可使用 <code>reduce</code> 方法将流中的元素迭代合并成一个结果. 如求和, 最大值等</p>\n</li>\n<li><code>filter</code> 和 <code>map</code>等操作是无状态的. 他们并不存储任何状态. </li>\n<li><code>reduce</code>等操作要存储状态才能计算一个值. <code>sorted</code> 和 <code>distinct</code>等操作也要存储状态, 因为他们需要把流中的所有元素缓存起来才能返回一个新的流. 这种操作也叫做有状态操作. </li>\n<li>流由三种基本原始类型特化: <code>IntStream</code>, <code>DoubleStream</code> 和 <code>LongStream</code>. 他们的操作也有相应的特化.</li>\n<li>流不仅可以从集合创建, 也可以从值, 数组, 文件以及<code>iterate</code>与<code>generate</code>等特定方法创建.</li>\n<li>无限流是没有固定大小的流.</li>\n</ul>\n</li>\n</ul>\n<p>用流收集数据</p>\n<p>流支持两种操作: <code>中间操作</code> 和 <code>终端操作</code>. 中间操作可以链接起来, 将一个流转为另一个流. 这些操作不会消耗流, 其目的是建立一个流水线. 终端操作会消耗流, 以产生一个最终结果, 如返回一个集合, 一个最大元素.</p>\n<p>收集器(Collector)</p>\n<p>预定义收集器的三大功能:</p>\n<ul>\n<li>将流元素归约和汇总为一个值</li>\n<li>元素分组</li>\n<li><p>元素分区</p>\n</li>\n<li><p><code>Collectors.counting()</code></p>\n</li>\n<li><code>Collectors.summingInt()</code></li>\n<li><code>Collectors.averagingInt()</code></li>\n<li><code>Collectors.summarizingInt()</code>: 通过一次 <code>summarizing</code> 操作你可以得到: 总和, 平均值, 最大值, 最下值.</li>\n</ul>\n<p>连接字符串</p>\n<ul>\n<li><code>Collectors.joining()</code></li>\n</ul>\n<p>收集(collect)和归约(reduce)</p>\n<ul>\n<li>reduce()方法旨在: 把两个值结合起来生成一个新值, 它是一个不可变的归约. </li>\n<li>collect()方法的设计就是要改变容器, 从而累积要输出的结果. </li>\n</ul>\n<p>分组</p>\n<ul>\n<li><code>Collectors.groupingBy()</code></li>\n<li><code>Collectors.collectingAndThen</code></li>\n<li><code>Collectors.mapping()</code></li>\n<li><code>Collectors.toCollection()</code></li>\n</ul>\n<p>分区</p>\n<p>分区是分组的特殊情况: 有一个谓词(返回一个布尔值的函数)作为分类函数, 它称之为分区函数. 分区函数返回一个布尔值, 这意味着得到的分组 Map 的键类型是 <code>Boolean</code>, 于是它最多分为两组, <code>true</code>是一组, <code>false</code>是一组. </p>\n<ul>\n<li><code>Collectors.partitioningBy</code>: 参数需要一个谓词(即: 返回一个布尔值的函数)</li>\n</ul>\n<p>分区的优势</p>\n<p>分区的好处在于: 保留了分区函数返回 <code>true</code> 或 <code>false</code> 的两套流元素列表. </p>\n<p><code>Collectors</code> 类的静态工厂方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">工厂方法</th>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p><code>toList</code> | <code>List&lt;T&gt;</code> | 把流中的所有项目收集到一个List<br><code>toSet</code> | <code>Set&lt;T&gt;</code> | 把流中的所有项目收集到一个Set, 删除重复项<br><code>toCollection</code> | <code>Collection&lt;T&gt;</code> | 把流中所有项目收集到给定的供应源创建的集合<br><code>counting</code> | <code>Long</code> | 计算流中的元素个数<br><code>summingInt</code> | <code>Integer</code> | 对流中项目的一个整数属性求和<br><code>averagingInt</code> | <code>Double</code> | 对有种项目的一个整数数据求平均值<br><code>summarizingInt</code> | <code>IntSummaryStatistics</code> | 收集关于流中项目<code>Integer</code>属性的统计值, 例如最大, 最小, 总和与平均值.<br><code>joining</code> | <code>String</code> | 连接流中每个元素, 对每个元素调用 <code>toString</code> 方法所生成的字符串进行连接<br><code>maxBy</code> | <code>Optional&lt;T&gt;</code> | 一个包裹了流中按照给定比较器选出最大元素的 <code>Optional</code><br><code>minBy</code> | <code>Optional&lt;T&gt;</code> | 同上求最小值<br><code>reducing</code> | 归约操作产生的类型 | 从一个作为累加器的初始值开始, 利用<code>BinaryOperator</code>与流中的元素逐个结合, 从而将流归约为单个值.<br><code>collectingAndThen</code> | 转换函数返回的类型 | 包含另一个收集器, 对其结果应用转换函数.<br><code>groupingBy</code> | <code>Map&lt;K, List&lt;T&gt;&gt;</code> | 根据项目的一个属性的值对流中的项目作问组, 并将属性值最为结果Map的键<br><code>partitioningBy</code> | <code>Map&lt;Boolean, List&lt;T&gt;&gt;</code> | 根据对流中每个项目应用谓词的结果来对项目进行分区</p>\n<p>收集器接口</p>\n<p>Collector接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collector</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">A</span>, <span class=\"title\">R</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">Supplier&lt;A&gt; <span class=\"title\">supplier</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">BiConsumer&lt;A, T&gt; <span class=\"title\">accumulator</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">Function&lt;A, R&gt; <span class=\"title\">finisher</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">BinaryOperator&lt;A&gt; <span class=\"title\">combiner</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">Set&lt;Characteristics&gt; <span class=\"title\">characteristics</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>T 是流中要收集的项目泛型</li>\n<li>A 是累加器的类型, 累加器是在收集过程中用于累积部分结果的对象</li>\n<li>R 是收集操作得到的对象(通常但并不一定是集合)的类型.</li>\n</ul>\n<p>前面四个方法都会返回一个会被 <code>collect</code> 方法调用的函数, 而第五个方法 <code>characteristics</code> 则提供了一系列特征, 也就是一个提示列表, 告诉 <code>collect</code> 方法在执行归约操作的时候可以应用那些优化(比如并行化).</p>\n<ul>\n<li><p>建立新的结果容器: <code>supplier</code> 方法</p>\n<p>  <code>supplier</code> 方法必须放回一个结果为空的 <code>Supplier</code>, 也就是一个无参的构造函数, 在调用时它会创建一个空的累加器实例, 提供数据收集过程使用. </p>\n</li>\n<li><p>将元素添加到结果容器: <code>accumulator</code> 方法</p>\n<p>  <code>accumulator</code> 方法会返回执行归约操作的函数. 当遍历到流中第 <code>n</code> 个元素时, 这个函数执行时会有两个参数: 保存归约结果的累加器(已收集了流中前 <code>n-1</code> 个元素), 还有第 <code>n</code> 个元素本身. 该函数将返回 <code>void</code>, 因为累加器是原位更新, 即<em>函数的执行改变了它的内部状态以体现遍历的元素的效果</em>. </p>\n</li>\n<li><p>对结果容器应用最终转换: <code>finisher</code> 方法</p>\n<p>  在遍历完流后, <code>finisher</code> 方法必须返回在累积过程的最后要调用的一个函数, 以便将累加器对象转换为整个集合操作的最终结果. 通常, 累加器对象(<code>accumulator</code> 方法返回)恰好符合预期的最终结果, 因此无需进行转换. 所以 <code>finisher</code> 方法只需返回 <code>Function</code> 接口的静态方法 <code>identity</code> 函数. </p>\n</li>\n</ul>\n<p>以上三个方法已经足以对流进行顺序归约. </p>\n<p><img src=\"https://image.fuxiao86.com/14876400532202.jpg\" alt=\"-w2280\"></p>\n<ul>\n<li><p>合并两个结果容器: <code>combiner</code> 方法</p>\n<p>  <code>combiner</code> 方法会返回一个供归约操作使用的函数, 它定义了对流的各个子部分进行并行处理时, 各个子部分归约所得的累加器要如何合并. </p>\n<p>  有了这第四个方法, 就可以对流进行并行归约了. 它会用到JAVA7中引入的<em>分支/合并框架</em>和<em>Spliterator</em>抽象. </p>\n<p>  <img src=\"https://image.fuxiao86.com/14876413432867.jpg\" alt=\"-w1209\"></p>\n</li>\n<li><p><code>characteristics</code> 方法</p>\n<p>  <code>characteristics</code> 会返回一个不可变的 <code>Characteristics</code> 集合, 它定义了收集器的行为 - 尤其是关于流是否可以并行归约, 以及可以使用那些优化的提示. </p>\n<p>  <code>Characteristics</code> 是一个包含三个项目的枚举.</p>\n<ul>\n<li><code>UNORDERED</code>: 归约结果不受流中项目的遍历和累积顺序的影响.</li>\n<li><code>CONCURRENT</code>: <code>accumulator</code>函数可以从多个线程同时调用, 且该收集器可以并行归约流. 如果收集器没有标记为 <code>UNORDERED</code>, 那它仅在用于无序数据源时才可以并行归约. </li>\n<li><code>IDENTITY_FINISH</code>: 这表明完成器方法返回的函数是一个恒等函数, 可以跳过. 这种情况下累加器对象将会直接用作归约过程的最终结果. 这也意味着, 将累加器A不加检查地转换为结果R是安全的.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><code>Collections.emptyList()</code> 获取一个空的 List</p>\n</blockquote>\n<p>小结</p>\n<ul>\n<li><code>collect</code> 是一个终端操作, 它接受的参数时将流中的元素累积到汇总结果的各种方式(称为收集器).</li>\n<li>预定义收集器包括: 将流元素归约和汇总到一个值, 例如计算最小值, 最大值或平均值.</li>\n<li>预定义收集器可以用<code>groupingBy</code> 对流中元素进行分组, 或用<code>partitioningBy</code>进行分区.</li>\n<li>收集器可以高效地复合起来, 进行多级分组, 分区和归约.</li>\n<li>可以自定义实现<code>Collector</code> 接口中定义的方法来开发自己的收集器.</li>\n</ul>\n<p>并行数据处理及性能</p>\n<ul>\n<li><p>并行流</p>\n<p>  并行流: 是一个把内容分成多个数据块, 并且不同的线程分别处理每个数据块的流.</p>\n<p>  可以通过对收集源调用<code>parallelStream</code> 方法来把集合转为并行流.</p>\n<ul>\n<li>对流调用 <code>parallel()</code> 方法可以转为并行流</li>\n<li><p>对并行流调用<code>sequential()</code> 方法可以转为顺序流</p>\n<p>并行流内部使用了默认的<code>ForkJoinPool</code>, 它默认的线程数量就是运行机器的处理器数量, 这个值是由<code>Runtime.getRuntime().availableProcessors()</code>得到. 但可以通过系统属性: <code>java.util.concurrent.ForkJoinPool.common.parallelism</code> 来改变线程池大小.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.setProperty(<span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>, <span class=\"number\">12</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>这是一个全局设置, 因此它将影响代码中所有的并行流. 反过来目前还无法转为某个并行流指定这个值. 一般而言, 让` ForkJoinPool` 的大小等于处理器的数量是个不错的默认值.\n\n&gt; iterate 很难分割成能够独立执行的小块, 因为每次应用这个函数都有依赖前一次应用的结果.\n\n&gt; 共享可变状态会影响并行流以及并行计算. 所以**避免共享可变状态**\n\n高效的使用并行流\n\n* 如果对并行效率有疑问, 请测试运算时间.\n* 注意装箱拆箱操作. 自动装箱机拆箱会大大降低性能.\n* 有些操作本身在并行流上的性能就比顺序流差. 特别是 `limit` 和 `findFirst` 等依赖于元素顺序的操作. 他们在并行流上执行的代价非常大. `findAny` 会比 `findFirst` 性能好. 可以通过调用 `unordered` 方法来把有序流变成无序流. 对无序并行流调用 `limit` 可能会比单个有序流更高效.\n* 并行成本 = N*Q. N: 要处理的元素总数, Q: 一个元素通过流水线的大致处理成本. Q值越高, 意味着并行流性能好的可能性比较大.\n* 对于较小的数据量, 选择并行流几乎从来都不是一个好的决定. 并行处理少数几个元素的好处抵不上并行化造成的额外开销.\n* 需要考虑流背后的数据结构是否易于分解. 如: AarrayList 的拆分效率比 LinkedList 高的多, 因为前者用不着遍历就可以平均拆分, 而后者必须遍历. \n* 流自身的特点, 以及流水线中的中间操作修改流的方式, 都可能改变分解过程的性能. \n* 还需要考虑终端操作中合并步骤的代价高低. 如 `Collector` 中的 `combiner` 方法.\n\n分支/合并框架\n\n* RecursiveTask&lt;R&gt;/RecursiveAction\n\n    R 是并行化产生的结果类型. 如果任务不返回结果, 则是用 `RecursiveAction`\n\n* Fork/Join 框架的工作窃取技术\n* Spliterator 接口.  可分迭代器. 用来遍历数据源中数据, 但它是为了并行执行而设计的. \n\n    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Spliterator</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">tryAdvance</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; action)</span></span>;</div><div class=\"line\">    <span class=\"function\">Spliterator&lt;T&gt; <span class=\"title\">trySplit</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">estmateSize</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">characteristics</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n\n    * T 是 Spliterator 遍历的元素的类型\n    * tryAdvance 方法的行为类似于普通的 Iterator, 因为它会按顺序一个一个使用 Spliterator 中的元素, 并且如果还有其他元素要遍历就返回 true\n    * trySplit 是装为 Spliterator 接口设计的, 因为它可以把一些元素划出去分给第二个 Spliterator( 由该方法返回), 让它们两个并行处理. \n    * Spliterator 通过 estimateSize 方法估计还剩多少元素要遍历\n    * characteristics抽象方法, 返回一个 int, 代表Spliterator 本身特性集的编码. 使用 Spliterator 的客户可以使用这些特性来更好地控制和优化它.\n\n    ![-w1422](https://image.fuxiao86.com/14876646717073.jpg)\n</code></pre>"},{"title":"Docker学习笔记","date":"2017-01-01T12:07:18.000Z","comments":0,"_content":"\n# Docker学习笔记\n\n## 简介\n\n基本概念\n\n* 镜像(Image)\n* 容器(Container)\n* 仓库(Repositroy)\n\n## 基本概念\n\n### 镜像\n\nDocker镜像(Image): 相当于一个`root`文件系统. 比如个官方镜像`ubuntu:14.04`就包含了一套Ubuntu14.04最小系统的`root`文件系统.\n\nDocker镜像死一个特殊的文件系统, 除了提供容器运行时所需的程序, 库, 资源, 配置等文件外, 还包含了一些为运行时准备的一些配置参数(如匿名卷, 环境变量, 用户等). 镜像不包含任何动态数据, 其内容在构建之后不会被改变.\n\n#### 分层存储\n\n利用`Union FS`技术, 分层存储架构. \n\n镜像构建时, 会分层构建, 前一层是后一层的基础. 每一层构建完毕后就不会发生变化. *比如删除一个前一层的文件操作, 实际不是真的删除前一层的文件, 而是仅在当前层标记为该文件已删除. 在最终容器运行的时候, 虽然不会看到这个文件, 但是实际上该文件会一直跟随镜像.* \n\n> 在构建镜像时, 需要额外小心, 每一层尽量只包含该层需要添加的东西, 任何额外的东西应该在该层构建结束前清理掉.\n\n\n分层存储的特征还可以使得镜像复用, 定制的更为容易. 甚至可以用之前的构建好的镜像作为基础层, 然后进一步添加新的层.\n\n### 容器\n\n镜像(Image)和容器(Container)的关系, 就像面向对象的`类`和`实例`一样. 镜像是静态的定义, 容器是镜像运行时的实体. 容器可以被创建, 启动, 停止, 删除, 暂停等.\n\n容器的实质是进程, 但与直接在宿主执行的进程不同, 容器进程运行于属于自己的独立的`命名空间`. 因此容器可以拥有自己的`root`文件系统, 自己的网络配置, 自己的进程弓箭, 甚至自己的用户ID控件. 容器内的进程是运行在一个隔离的环境里. \n\n容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此任何保存于容器存储层的信息都会随容器删除而消亡.\n\n> 按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 `数据卷(Volume)`. 或者绑定宿主的目录, 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.\n\n> 数据卷(Volume)的生命周期独立于容器, 容器消亡, 数据卷不会消亡.\n\n### 仓库\n\n镜像完成后很容易在当前宿主上运行, 但是, 如果需要其他服务器上使用这个镜像, 就需要一个集中存储, 分发镜像的服务, 即: `Docker Registry`服务\n\n一个 `Docker Registry` 中可以包含多个仓库 (Repository), 每个仓库可以包含多个标签 (Tag), 每个标签 (Tag) 对应一个镜像.\n\n一般来说, 一个仓库 包含的是同一个软件的不同版本镜像, 而标签则用于对应于软件的不同版本. 可以通过`仓库名:标签名`的格式来指定具体的一个镜像. 如果不给出标签值, 则将以`latest`作为默认标签.\n\n如,`Ubuntu镜像`为例, `Ubuntu`是仓库名, 仓库内有不同的版本, 使用标签`14.04`, `16.04`作为标签名来表示不同的版本. 我们可以通过: `Ubuntu:14.04`, `Ubuntu:16.04`来指定具体某一个\u0002镜像, 如果忽略了标签, 则视为`Ubuntu:latest`\n\n> 仓库名经常已两段式路径形式出现, 如 `jwilder/nginx-proxy`, 前者为 Docker Registry 多用户环境下的用户名, 后则为软件名.\n\n常用的 Docker Registry 服务有, `Docker Hub`, CoreOS 的`Quay.io`, Google 的 `Google Container Registry`等.\n\n自己可以搭建私有的 Docker Registry服务区. Docker 官网提供了 `Docker Registry 镜像`, 可以直接使用作为私有 Registry服务. \n\n\n\n","source":"_posts/Docker学习.md","raw":"---\ntitle: Docker学习笔记\ndate: 2017-01-01 20:07:18\ntags: docker\ncategories: docker\ncomments: false\n---\n\n# Docker学习笔记\n\n## 简介\n\n基本概念\n\n* 镜像(Image)\n* 容器(Container)\n* 仓库(Repositroy)\n\n## 基本概念\n\n### 镜像\n\nDocker镜像(Image): 相当于一个`root`文件系统. 比如个官方镜像`ubuntu:14.04`就包含了一套Ubuntu14.04最小系统的`root`文件系统.\n\nDocker镜像死一个特殊的文件系统, 除了提供容器运行时所需的程序, 库, 资源, 配置等文件外, 还包含了一些为运行时准备的一些配置参数(如匿名卷, 环境变量, 用户等). 镜像不包含任何动态数据, 其内容在构建之后不会被改变.\n\n#### 分层存储\n\n利用`Union FS`技术, 分层存储架构. \n\n镜像构建时, 会分层构建, 前一层是后一层的基础. 每一层构建完毕后就不会发生变化. *比如删除一个前一层的文件操作, 实际不是真的删除前一层的文件, 而是仅在当前层标记为该文件已删除. 在最终容器运行的时候, 虽然不会看到这个文件, 但是实际上该文件会一直跟随镜像.* \n\n> 在构建镜像时, 需要额外小心, 每一层尽量只包含该层需要添加的东西, 任何额外的东西应该在该层构建结束前清理掉.\n\n\n分层存储的特征还可以使得镜像复用, 定制的更为容易. 甚至可以用之前的构建好的镜像作为基础层, 然后进一步添加新的层.\n\n### 容器\n\n镜像(Image)和容器(Container)的关系, 就像面向对象的`类`和`实例`一样. 镜像是静态的定义, 容器是镜像运行时的实体. 容器可以被创建, 启动, 停止, 删除, 暂停等.\n\n容器的实质是进程, 但与直接在宿主执行的进程不同, 容器进程运行于属于自己的独立的`命名空间`. 因此容器可以拥有自己的`root`文件系统, 自己的网络配置, 自己的进程弓箭, 甚至自己的用户ID控件. 容器内的进程是运行在一个隔离的环境里. \n\n容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此任何保存于容器存储层的信息都会随容器删除而消亡.\n\n> 按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 `数据卷(Volume)`. 或者绑定宿主的目录, 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.\n\n> 数据卷(Volume)的生命周期独立于容器, 容器消亡, 数据卷不会消亡.\n\n### 仓库\n\n镜像完成后很容易在当前宿主上运行, 但是, 如果需要其他服务器上使用这个镜像, 就需要一个集中存储, 分发镜像的服务, 即: `Docker Registry`服务\n\n一个 `Docker Registry` 中可以包含多个仓库 (Repository), 每个仓库可以包含多个标签 (Tag), 每个标签 (Tag) 对应一个镜像.\n\n一般来说, 一个仓库 包含的是同一个软件的不同版本镜像, 而标签则用于对应于软件的不同版本. 可以通过`仓库名:标签名`的格式来指定具体的一个镜像. 如果不给出标签值, 则将以`latest`作为默认标签.\n\n如,`Ubuntu镜像`为例, `Ubuntu`是仓库名, 仓库内有不同的版本, 使用标签`14.04`, `16.04`作为标签名来表示不同的版本. 我们可以通过: `Ubuntu:14.04`, `Ubuntu:16.04`来指定具体某一个\u0002镜像, 如果忽略了标签, 则视为`Ubuntu:latest`\n\n> 仓库名经常已两段式路径形式出现, 如 `jwilder/nginx-proxy`, 前者为 Docker Registry 多用户环境下的用户名, 后则为软件名.\n\n常用的 Docker Registry 服务有, `Docker Hub`, CoreOS 的`Quay.io`, Google 的 `Google Container Registry`等.\n\n自己可以搭建私有的 Docker Registry服务区. Docker 官网提供了 `Docker Registry 镜像`, 可以直接使用作为私有 Registry服务. \n\n\n\n","slug":"Docker学习","published":1,"updated":"2017-01-03T08:47:09.000Z","layout":"post","photos":[],"link":"","_id":"cizfbhn620002p7tlv9wtb195","content":"<h1 id=\"Docker学习笔记\"><a href=\"#Docker学习笔记\" class=\"headerlink\" title=\"Docker学习笔记\"></a>Docker学习笔记</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>基本概念</p>\n<ul>\n<li>镜像(Image)</li>\n<li>容器(Container)</li>\n<li>仓库(Repositroy)</li>\n</ul>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>Docker镜像(Image): 相当于一个<code>root</code>文件系统. 比如个官方镜像<code>ubuntu:14.04</code>就包含了一套Ubuntu14.04最小系统的<code>root</code>文件系统.</p>\n<p>Docker镜像死一个特殊的文件系统, 除了提供容器运行时所需的程序, 库, 资源, 配置等文件外, 还包含了一些为运行时准备的一些配置参数(如匿名卷, 环境变量, 用户等). 镜像不包含任何动态数据, 其内容在构建之后不会被改变.</p>\n<h4 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h4><p>利用<code>Union FS</code>技术, 分层存储架构. </p>\n<p>镜像构建时, 会分层构建, 前一层是后一层的基础. 每一层构建完毕后就不会发生变化. <em>比如删除一个前一层的文件操作, 实际不是真的删除前一层的文件, 而是仅在当前层标记为该文件已删除. 在最终容器运行的时候, 虽然不会看到这个文件, 但是实际上该文件会一直跟随镜像.</em> </p>\n<blockquote>\n<p>在构建镜像时, 需要额外小心, 每一层尽量只包含该层需要添加的东西, 任何额外的东西应该在该层构建结束前清理掉.</p>\n</blockquote>\n<p>分层存储的特征还可以使得镜像复用, 定制的更为容易. 甚至可以用之前的构建好的镜像作为基础层, 然后进一步添加新的层.</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>镜像(Image)和容器(Container)的关系, 就像面向对象的<code>类</code>和<code>实例</code>一样. 镜像是静态的定义, 容器是镜像运行时的实体. 容器可以被创建, 启动, 停止, 删除, 暂停等.</p>\n<p>容器的实质是进程, 但与直接在宿主执行的进程不同, 容器进程运行于属于自己的独立的<code>命名空间</code>. 因此容器可以拥有自己的<code>root</code>文件系统, 自己的网络配置, 自己的进程弓箭, 甚至自己的用户ID控件. 容器内的进程是运行在一个隔离的环境里. </p>\n<p>容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此任何保存于容器存储层的信息都会随容器删除而消亡.</p>\n<blockquote>\n<p>按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 <code>数据卷(Volume)</code>. 或者绑定宿主的目录, 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.</p>\n<p>数据卷(Volume)的生命周期独立于容器, 容器消亡, 数据卷不会消亡.</p>\n</blockquote>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><p>镜像完成后很容易在当前宿主上运行, 但是, 如果需要其他服务器上使用这个镜像, 就需要一个集中存储, 分发镜像的服务, 即: <code>Docker Registry</code>服务</p>\n<p>一个 <code>Docker Registry</code> 中可以包含多个仓库 (Repository), 每个仓库可以包含多个标签 (Tag), 每个标签 (Tag) 对应一个镜像.</p>\n<p>一般来说, 一个仓库 包含的是同一个软件的不同版本镜像, 而标签则用于对应于软件的不同版本. 可以通过<code>仓库名:标签名</code>的格式来指定具体的一个镜像. 如果不给出标签值, 则将以<code>latest</code>作为默认标签.</p>\n<p>如,<code>Ubuntu镜像</code>为例, <code>Ubuntu</code>是仓库名, 仓库内有不同的版本, 使用标签<code>14.04</code>, <code>16.04</code>作为标签名来表示不同的版本. 我们可以通过: <code>Ubuntu:14.04</code>, <code>Ubuntu:16.04</code>来指定具体某一个\u0002镜像, 如果忽略了标签, 则视为<code>Ubuntu:latest</code></p>\n<blockquote>\n<p>仓库名经常已两段式路径形式出现, 如 <code>jwilder/nginx-proxy</code>, 前者为 Docker Registry 多用户环境下的用户名, 后则为软件名.</p>\n</blockquote>\n<p>常用的 Docker Registry 服务有, <code>Docker Hub</code>, CoreOS 的<code>Quay.io</code>, Google 的 <code>Google Container Registry</code>等.</p>\n<p>自己可以搭建私有的 Docker Registry服务区. Docker 官网提供了 <code>Docker Registry 镜像</code>, 可以直接使用作为私有 Registry服务. </p>\n","excerpt":"","more":"<h1 id=\"Docker学习笔记\"><a href=\"#Docker学习笔记\" class=\"headerlink\" title=\"Docker学习笔记\"></a>Docker学习笔记</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>基本概念</p>\n<ul>\n<li>镜像(Image)</li>\n<li>容器(Container)</li>\n<li>仓库(Repositroy)</li>\n</ul>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>Docker镜像(Image): 相当于一个<code>root</code>文件系统. 比如个官方镜像<code>ubuntu:14.04</code>就包含了一套Ubuntu14.04最小系统的<code>root</code>文件系统.</p>\n<p>Docker镜像死一个特殊的文件系统, 除了提供容器运行时所需的程序, 库, 资源, 配置等文件外, 还包含了一些为运行时准备的一些配置参数(如匿名卷, 环境变量, 用户等). 镜像不包含任何动态数据, 其内容在构建之后不会被改变.</p>\n<h4 id=\"分层存储\"><a href=\"#分层存储\" class=\"headerlink\" title=\"分层存储\"></a>分层存储</h4><p>利用<code>Union FS</code>技术, 分层存储架构. </p>\n<p>镜像构建时, 会分层构建, 前一层是后一层的基础. 每一层构建完毕后就不会发生变化. <em>比如删除一个前一层的文件操作, 实际不是真的删除前一层的文件, 而是仅在当前层标记为该文件已删除. 在最终容器运行的时候, 虽然不会看到这个文件, 但是实际上该文件会一直跟随镜像.</em> </p>\n<blockquote>\n<p>在构建镜像时, 需要额外小心, 每一层尽量只包含该层需要添加的东西, 任何额外的东西应该在该层构建结束前清理掉.</p>\n</blockquote>\n<p>分层存储的特征还可以使得镜像复用, 定制的更为容易. 甚至可以用之前的构建好的镜像作为基础层, 然后进一步添加新的层.</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>镜像(Image)和容器(Container)的关系, 就像面向对象的<code>类</code>和<code>实例</code>一样. 镜像是静态的定义, 容器是镜像运行时的实体. 容器可以被创建, 启动, 停止, 删除, 暂停等.</p>\n<p>容器的实质是进程, 但与直接在宿主执行的进程不同, 容器进程运行于属于自己的独立的<code>命名空间</code>. 因此容器可以拥有自己的<code>root</code>文件系统, 自己的网络配置, 自己的进程弓箭, 甚至自己的用户ID控件. 容器内的进程是运行在一个隔离的环境里. </p>\n<p>容器存储层的生存周期和容器一样, 容器消亡时, 容器存储层也随之消亡. 因此任何保存于容器存储层的信息都会随容器删除而消亡.</p>\n<blockquote>\n<p>按照 Docker 最佳实践的要求, 容器不应该向其存储层内写入任何数据, 容器存储层要保持无状态化. 所有的文件写入操作, 都应该使用 <code>数据卷(Volume)</code>. 或者绑定宿主的目录, 在这些位置的读写会跳过容器存储层, 直接对宿主(或网络存储)发生读写, 其性能和稳定性更高.</p>\n<p>数据卷(Volume)的生命周期独立于容器, 容器消亡, 数据卷不会消亡.</p>\n</blockquote>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><p>镜像完成后很容易在当前宿主上运行, 但是, 如果需要其他服务器上使用这个镜像, 就需要一个集中存储, 分发镜像的服务, 即: <code>Docker Registry</code>服务</p>\n<p>一个 <code>Docker Registry</code> 中可以包含多个仓库 (Repository), 每个仓库可以包含多个标签 (Tag), 每个标签 (Tag) 对应一个镜像.</p>\n<p>一般来说, 一个仓库 包含的是同一个软件的不同版本镜像, 而标签则用于对应于软件的不同版本. 可以通过<code>仓库名:标签名</code>的格式来指定具体的一个镜像. 如果不给出标签值, 则将以<code>latest</code>作为默认标签.</p>\n<p>如,<code>Ubuntu镜像</code>为例, <code>Ubuntu</code>是仓库名, 仓库内有不同的版本, 使用标签<code>14.04</code>, <code>16.04</code>作为标签名来表示不同的版本. 我们可以通过: <code>Ubuntu:14.04</code>, <code>Ubuntu:16.04</code>来指定具体某一个\u0002镜像, 如果忽略了标签, 则视为<code>Ubuntu:latest</code></p>\n<blockquote>\n<p>仓库名经常已两段式路径形式出现, 如 <code>jwilder/nginx-proxy</code>, 前者为 Docker Registry 多用户环境下的用户名, 后则为软件名.</p>\n</blockquote>\n<p>常用的 Docker Registry 服务有, <code>Docker Hub</code>, CoreOS 的<code>Quay.io</code>, Google 的 <code>Google Container Registry</code>等.</p>\n<p>自己可以搭建私有的 Docker Registry服务区. Docker 官网提供了 <code>Docker Registry 镜像</code>, 可以直接使用作为私有 Registry服务. </p>\n"},{"title":"Better Java (1)- JDK8中有关时间的操作","date":"2016-10-18T08:37:16.000Z","_content":"\n## Better Java (1)- JDK8中有关时间的操作\n\n今天读了[Better Java](https://github.com/cxxr/better-java/blob/master/README.zh-cn.md)一文, 之前在项目中有关时间的操作基本上都是使用`Calendar`, 这次学习一下[JDK8有关时间的操作](http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html).\n\n`LocalDate`操作日期, 如年月日, 不包含时分秒. `LocalTime`操作时分秒, 不包含年月日. `LocalDateTime`最为强大, 包含了年月日时分秒. 看内部实现, 其内部包含`LocalDate`和`LocalTime`两个对象, 三个类的用法都差不多.\n\n```java\nLocalDateTime timePoint = LocalDateTime.now(); // 当前日期和时间,\nSystem.out.println(timePoint); // 输出: 2016-10-18T16:51:14.334\n\n// 获取年月日时分秒毫秒\nSystem.out.println(timePoint.getYear() + \"年\"\n   + timePoint.getMonthValue() + \"月\"\n   + timePoint.getDayOfMonth() + \"日, 星期\" + timePoint.getDayOfWeek().getValue() + \",\"\n   + timePoint.getHour() + \"时\"\n   + timePoint.getMinute() + \"分\"\n   + timePoint.getSecond() + \"秒\"\n   + timePoint.getNano() + \"毫秒\");\n```\n\n如何生成特定日期的? 可通过 `LocalDateTime.of()`类方法生成, 或者通过已`with`及`plus`开头的实例方法来生成. `with`开头的实例方法根据参数生成指定日期, `plus`开头的实例方法根据参数推断日期.\n\n```java\n// 生成一个指定日期: 2015年10月10日0点0分0秒\nLocalDateTime timePoint = LocalDateTime.of(2016, 10, 10, 0, 0, 0);\nSystem.out.println( \"timePoint = \" + timePoint); // 输出: timePoint = 2016-10-10T00:00\n\n// 通过plus开头的实例方法, 推断日期, 天数减8, 小时加2, 周减1\nLocalDateTime yetAnther = timePoint.plusDays(-8).plusHours(2).plus(-1, ChronoUnit.WEEKS);\nSystem.out.println(\"yetAnther = \" + yetAnther); // 输出: yetAnther = 2016-09-25T02:00\n\n// 可以通过具体逻辑生成指定日期, plus也有如下方法\nyetAnther = timePoint.with(temporal\n   -> temporal.plus(-1, ChronoUnit.MONTHS).with(ChronoField.YEAR, 2015));\nSystem.out.println(yetAnther); // 输出: yetAnther = 2015-09-10T00:00\n```\n\n> `LocalDateTime`, `LocalDate`, `LocalTime`都是不可变对象, 也就是说通过它们的API得到的时间都是不会改变自己的值, 都是用自身的时间点计算得到的结果. 如代码最后一个方法, 是根据`timePoint`对象生成的时间`2016-10-10 00:00:00`生成指定日期的.\n\n有时我们需要不同精度的时间, 比如, 我只需要年月, 不需要日时分秒, 怎么办?\n\n```java\n// 转换到所需的时间精度\ntimePoint = LocalDateTime.of(2016, 9, 12, 23, 59, 59, 3);\nSystem.out.println(\"时间 : \" + timePoint);\nLocalDateTime truncatedTime = timePoint.truncatedTo(ChronoUnit.DAYS);\nSystem.out.println(\"时间精度到天: \" + truncatedTime);\ntruncatedTime = timePoint.truncatedTo(ChronoUnit.HOURS);\nSystem.out.println(\"时间精度到小时: \" + truncatedTime);\ntruncatedTime = timePoint.truncatedTo(ChronoUnit.MINUTES);\nSystem.out.println(\"时间精度到分钟: \" + truncatedTime);\ntruncatedTime = timePoint.truncatedTo(ChronoUnit.SECONDS);\nSystem.out.println(\"时间精度到秒: \" + truncatedTime);\ntruncatedTime = timePoint.truncatedTo(ChronoUnit.NANOS);\nSystem.out.println(\"时间精度到毫秒: \" + truncatedTime);\n```\n\n> 时间精度最大到天, 不能在大于此精度. 否则会抛出异常: `UnsupportedTemporalTypeException: Unit is too large to be used for truncation`\n\n有时我们会对时间做时区处理, 根据本地时间, 推算某个时区的时间, 怎么办? 这里主要用到两个对象: `OffsetDateTime`和`ZoneOffset`.\n\n使用`OffsetDateTime`获取时区时间, 使用方法与`localDateTaime`类似. 使用`ZoneOffset`对象生成时区. 两个对象配合, 即可获取我们想要的时区时间. 下面有两个重要的方法`withOffsetSameInstant`和`withOffsetSameLocal`\n\n```java\nOffsetDateTime time = OffsetDateTime.now(); // 这个是系统当前时间\nSystem.out.println(\"当前时区时间 = \" + time);\n\ntime = OffsetDateTime.of(2016, 10, 10, 12, 59, 59, 0, ZoneOffset.of(\"+08:00\"));\nSystem.out.println(\"指定时区的指定时间 = \" + time);\n\nZoneOffset offset = ZoneOffset.of(\"+09:00\"); // 生成指定时区\n\n// 用自身时间计算指定时区的时间.\nOffsetDateTime offsetTime1 = time.withOffsetSameInstant(offset);\n\n// offsetTime1 = 2016-10-10T13:59:59+09:00\nSystem.out.println(\"offsetTime1 = \" + offsetTime1);\n\n// 将自身时间的时区更换为指定时区, 时间不变\nOffsetDateTime offsetTime2 = time.withOffsetSameLocal(offset);\n\n// offsetTime2 = 2016-10-10T12:59:59+09:00\nSystem.out.println(\"offsetTime2 = \" + offsetTime2);\n\n// API与LocalDateTime对象类似\nOffsetDateTime offsetTime3 = offsetTime2.withHour(3).plusSeconds(2);\nSystem.out.println(\"offsetTime3 = \" + offsetTime3);\n```\n\nJDK8还提供了两个非常方便的对象, 让我们来计算时间. `Period`和`Duration`. 根据这两个参数非常方便推算出我们想要的时间. `Period`用于推算年月日, 最低精度到天, `Duration`用于推算天时分秒, 最低精度到毫秒.\n\n```java\nPeriod period = Period.of(3, 2, 1); // 3年, 2月, 1天\nLocalDateTime now = LocalDateTime.now();\nLocalDateTime periodTime = now.plus(period);\nSystem.out.println(\"now = \" + now);\nSystem.out.println(\"periodTime = \" + periodTime);\n\n// Durations\nDuration duration = Duration.ofSeconds(3, 5);\nLocalDateTime durationTime = now.plus(duration);\nSystem.out.println(\"dutationTime = \" + durationTime);\n```\n\n\n\n\n\n\n","source":"_posts/java8-time.md","raw":"---\ntitle: Better Java (1)- JDK8中有关时间的操作\ndate: 2016-10-18 16:37:16\ntags: Java\ncategories: Java\n---\n\n## Better Java (1)- JDK8中有关时间的操作\n\n今天读了[Better Java](https://github.com/cxxr/better-java/blob/master/README.zh-cn.md)一文, 之前在项目中有关时间的操作基本上都是使用`Calendar`, 这次学习一下[JDK8有关时间的操作](http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html).\n\n`LocalDate`操作日期, 如年月日, 不包含时分秒. `LocalTime`操作时分秒, 不包含年月日. `LocalDateTime`最为强大, 包含了年月日时分秒. 看内部实现, 其内部包含`LocalDate`和`LocalTime`两个对象, 三个类的用法都差不多.\n\n```java\nLocalDateTime timePoint = LocalDateTime.now(); // 当前日期和时间,\nSystem.out.println(timePoint); // 输出: 2016-10-18T16:51:14.334\n\n// 获取年月日时分秒毫秒\nSystem.out.println(timePoint.getYear() + \"年\"\n   + timePoint.getMonthValue() + \"月\"\n   + timePoint.getDayOfMonth() + \"日, 星期\" + timePoint.getDayOfWeek().getValue() + \",\"\n   + timePoint.getHour() + \"时\"\n   + timePoint.getMinute() + \"分\"\n   + timePoint.getSecond() + \"秒\"\n   + timePoint.getNano() + \"毫秒\");\n```\n\n如何生成特定日期的? 可通过 `LocalDateTime.of()`类方法生成, 或者通过已`with`及`plus`开头的实例方法来生成. `with`开头的实例方法根据参数生成指定日期, `plus`开头的实例方法根据参数推断日期.\n\n```java\n// 生成一个指定日期: 2015年10月10日0点0分0秒\nLocalDateTime timePoint = LocalDateTime.of(2016, 10, 10, 0, 0, 0);\nSystem.out.println( \"timePoint = \" + timePoint); // 输出: timePoint = 2016-10-10T00:00\n\n// 通过plus开头的实例方法, 推断日期, 天数减8, 小时加2, 周减1\nLocalDateTime yetAnther = timePoint.plusDays(-8).plusHours(2).plus(-1, ChronoUnit.WEEKS);\nSystem.out.println(\"yetAnther = \" + yetAnther); // 输出: yetAnther = 2016-09-25T02:00\n\n// 可以通过具体逻辑生成指定日期, plus也有如下方法\nyetAnther = timePoint.with(temporal\n   -> temporal.plus(-1, ChronoUnit.MONTHS).with(ChronoField.YEAR, 2015));\nSystem.out.println(yetAnther); // 输出: yetAnther = 2015-09-10T00:00\n```\n\n> `LocalDateTime`, `LocalDate`, `LocalTime`都是不可变对象, 也就是说通过它们的API得到的时间都是不会改变自己的值, 都是用自身的时间点计算得到的结果. 如代码最后一个方法, 是根据`timePoint`对象生成的时间`2016-10-10 00:00:00`生成指定日期的.\n\n有时我们需要不同精度的时间, 比如, 我只需要年月, 不需要日时分秒, 怎么办?\n\n```java\n// 转换到所需的时间精度\ntimePoint = LocalDateTime.of(2016, 9, 12, 23, 59, 59, 3);\nSystem.out.println(\"时间 : \" + timePoint);\nLocalDateTime truncatedTime = timePoint.truncatedTo(ChronoUnit.DAYS);\nSystem.out.println(\"时间精度到天: \" + truncatedTime);\ntruncatedTime = timePoint.truncatedTo(ChronoUnit.HOURS);\nSystem.out.println(\"时间精度到小时: \" + truncatedTime);\ntruncatedTime = timePoint.truncatedTo(ChronoUnit.MINUTES);\nSystem.out.println(\"时间精度到分钟: \" + truncatedTime);\ntruncatedTime = timePoint.truncatedTo(ChronoUnit.SECONDS);\nSystem.out.println(\"时间精度到秒: \" + truncatedTime);\ntruncatedTime = timePoint.truncatedTo(ChronoUnit.NANOS);\nSystem.out.println(\"时间精度到毫秒: \" + truncatedTime);\n```\n\n> 时间精度最大到天, 不能在大于此精度. 否则会抛出异常: `UnsupportedTemporalTypeException: Unit is too large to be used for truncation`\n\n有时我们会对时间做时区处理, 根据本地时间, 推算某个时区的时间, 怎么办? 这里主要用到两个对象: `OffsetDateTime`和`ZoneOffset`.\n\n使用`OffsetDateTime`获取时区时间, 使用方法与`localDateTaime`类似. 使用`ZoneOffset`对象生成时区. 两个对象配合, 即可获取我们想要的时区时间. 下面有两个重要的方法`withOffsetSameInstant`和`withOffsetSameLocal`\n\n```java\nOffsetDateTime time = OffsetDateTime.now(); // 这个是系统当前时间\nSystem.out.println(\"当前时区时间 = \" + time);\n\ntime = OffsetDateTime.of(2016, 10, 10, 12, 59, 59, 0, ZoneOffset.of(\"+08:00\"));\nSystem.out.println(\"指定时区的指定时间 = \" + time);\n\nZoneOffset offset = ZoneOffset.of(\"+09:00\"); // 生成指定时区\n\n// 用自身时间计算指定时区的时间.\nOffsetDateTime offsetTime1 = time.withOffsetSameInstant(offset);\n\n// offsetTime1 = 2016-10-10T13:59:59+09:00\nSystem.out.println(\"offsetTime1 = \" + offsetTime1);\n\n// 将自身时间的时区更换为指定时区, 时间不变\nOffsetDateTime offsetTime2 = time.withOffsetSameLocal(offset);\n\n// offsetTime2 = 2016-10-10T12:59:59+09:00\nSystem.out.println(\"offsetTime2 = \" + offsetTime2);\n\n// API与LocalDateTime对象类似\nOffsetDateTime offsetTime3 = offsetTime2.withHour(3).plusSeconds(2);\nSystem.out.println(\"offsetTime3 = \" + offsetTime3);\n```\n\nJDK8还提供了两个非常方便的对象, 让我们来计算时间. `Period`和`Duration`. 根据这两个参数非常方便推算出我们想要的时间. `Period`用于推算年月日, 最低精度到天, `Duration`用于推算天时分秒, 最低精度到毫秒.\n\n```java\nPeriod period = Period.of(3, 2, 1); // 3年, 2月, 1天\nLocalDateTime now = LocalDateTime.now();\nLocalDateTime periodTime = now.plus(period);\nSystem.out.println(\"now = \" + now);\nSystem.out.println(\"periodTime = \" + periodTime);\n\n// Durations\nDuration duration = Duration.ofSeconds(3, 5);\nLocalDateTime durationTime = now.plus(duration);\nSystem.out.println(\"dutationTime = \" + durationTime);\n```\n\n\n\n\n\n\n","slug":"java8-time","published":1,"updated":"2017-02-21T09:11:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfbhn690006p7tlrk6prr2d","content":"<h2 id=\"Better-Java-1-JDK8中有关时间的操作\"><a href=\"#Better-Java-1-JDK8中有关时间的操作\" class=\"headerlink\" title=\"Better Java (1)- JDK8中有关时间的操作\"></a>Better Java (1)- JDK8中有关时间的操作</h2><p>今天读了<a href=\"https://github.com/cxxr/better-java/blob/master/README.zh-cn.md\" target=\"_blank\" rel=\"external\">Better Java</a>一文, 之前在项目中有关时间的操作基本上都是使用<code>Calendar</code>, 这次学习一下<a href=\"http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html\" target=\"_blank\" rel=\"external\">JDK8有关时间的操作</a>.</p>\n<p><code>LocalDate</code>操作日期, 如年月日, 不包含时分秒. <code>LocalTime</code>操作时分秒, 不包含年月日. <code>LocalDateTime</code>最为强大, 包含了年月日时分秒. 看内部实现, 其内部包含<code>LocalDate</code>和<code>LocalTime</code>两个对象, 三个类的用法都差不多.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime timePoint = LocalDateTime.now(); <span class=\"comment\">// 当前日期和时间,</span></div><div class=\"line\">System.out.println(timePoint); <span class=\"comment\">// 输出: 2016-10-18T16:51:14.334</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取年月日时分秒毫秒</span></div><div class=\"line\">System.out.println(timePoint.getYear() + <span class=\"string\">\"年\"</span></div><div class=\"line\">   + timePoint.getMonthValue() + <span class=\"string\">\"月\"</span></div><div class=\"line\">   + timePoint.getDayOfMonth() + <span class=\"string\">\"日, 星期\"</span> + timePoint.getDayOfWeek().getValue() + <span class=\"string\">\",\"</span></div><div class=\"line\">   + timePoint.getHour() + <span class=\"string\">\"时\"</span></div><div class=\"line\">   + timePoint.getMinute() + <span class=\"string\">\"分\"</span></div><div class=\"line\">   + timePoint.getSecond() + <span class=\"string\">\"秒\"</span></div><div class=\"line\">   + timePoint.getNano() + <span class=\"string\">\"毫秒\"</span>);</div></pre></td></tr></table></figure>\n<p>如何生成特定日期的? 可通过 <code>LocalDateTime.of()</code>类方法生成, 或者通过已<code>with</code>及<code>plus</code>开头的实例方法来生成. <code>with</code>开头的实例方法根据参数生成指定日期, <code>plus</code>开头的实例方法根据参数推断日期.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生成一个指定日期: 2015年10月10日0点0分0秒</span></div><div class=\"line\">LocalDateTime timePoint = LocalDateTime.of(<span class=\"number\">2016</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">System.out.println( <span class=\"string\">\"timePoint = \"</span> + timePoint); <span class=\"comment\">// 输出: timePoint = 2016-10-10T00:00</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过plus开头的实例方法, 推断日期, 天数减8, 小时加2, 周减1</span></div><div class=\"line\">LocalDateTime yetAnther = timePoint.plusDays(-<span class=\"number\">8</span>).plusHours(<span class=\"number\">2</span>).plus(-<span class=\"number\">1</span>, ChronoUnit.WEEKS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"yetAnther = \"</span> + yetAnther); <span class=\"comment\">// 输出: yetAnther = 2016-09-25T02:00</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以通过具体逻辑生成指定日期, plus也有如下方法</span></div><div class=\"line\">yetAnther = timePoint.with(temporal</div><div class=\"line\">   -&gt; temporal.plus(-<span class=\"number\">1</span>, ChronoUnit.MONTHS).with(ChronoField.YEAR, <span class=\"number\">2015</span>));</div><div class=\"line\">System.out.println(yetAnther); <span class=\"comment\">// 输出: yetAnther = 2015-09-10T00:00</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>LocalDateTime</code>, <code>LocalDate</code>, <code>LocalTime</code>都是不可变对象, 也就是说通过它们的API得到的时间都是不会改变自己的值, 都是用自身的时间点计算得到的结果. 如代码最后一个方法, 是根据<code>timePoint</code>对象生成的时间<code>2016-10-10 00:00:00</code>生成指定日期的.</p>\n</blockquote>\n<p>有时我们需要不同精度的时间, 比如, 我只需要年月, 不需要日时分秒, 怎么办?</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 转换到所需的时间精度</span></div><div class=\"line\">timePoint = LocalDateTime.of(<span class=\"number\">2016</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">3</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间 : \"</span> + timePoint);</div><div class=\"line\">LocalDateTime truncatedTime = timePoint.truncatedTo(ChronoUnit.DAYS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到天: \"</span> + truncatedTime);</div><div class=\"line\">truncatedTime = timePoint.truncatedTo(ChronoUnit.HOURS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到小时: \"</span> + truncatedTime);</div><div class=\"line\">truncatedTime = timePoint.truncatedTo(ChronoUnit.MINUTES);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到分钟: \"</span> + truncatedTime);</div><div class=\"line\">truncatedTime = timePoint.truncatedTo(ChronoUnit.SECONDS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到秒: \"</span> + truncatedTime);</div><div class=\"line\">truncatedTime = timePoint.truncatedTo(ChronoUnit.NANOS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到毫秒: \"</span> + truncatedTime);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>时间精度最大到天, 不能在大于此精度. 否则会抛出异常: <code>UnsupportedTemporalTypeException: Unit is too large to be used for truncation</code></p>\n</blockquote>\n<p>有时我们会对时间做时区处理, 根据本地时间, 推算某个时区的时间, 怎么办? 这里主要用到两个对象: <code>OffsetDateTime</code>和<code>ZoneOffset</code>.</p>\n<p>使用<code>OffsetDateTime</code>获取时区时间, 使用方法与<code>localDateTaime</code>类似. 使用<code>ZoneOffset</code>对象生成时区. 两个对象配合, 即可获取我们想要的时区时间. 下面有两个重要的方法<code>withOffsetSameInstant</code>和<code>withOffsetSameLocal</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">OffsetDateTime time = OffsetDateTime.now(); <span class=\"comment\">// 这个是系统当前时间</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"当前时区时间 = \"</span> + time);</div><div class=\"line\"></div><div class=\"line\">time = OffsetDateTime.of(<span class=\"number\">2016</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">0</span>, ZoneOffset.of(<span class=\"string\">\"+08:00\"</span>));</div><div class=\"line\">System.out.println(<span class=\"string\">\"指定时区的指定时间 = \"</span> + time);</div><div class=\"line\"></div><div class=\"line\">ZoneOffset offset = ZoneOffset.of(<span class=\"string\">\"+09:00\"</span>); <span class=\"comment\">// 生成指定时区</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用自身时间计算指定时区的时间.</span></div><div class=\"line\">OffsetDateTime offsetTime1 = time.withOffsetSameInstant(offset);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// offsetTime1 = 2016-10-10T13:59:59+09:00</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"offsetTime1 = \"</span> + offsetTime1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将自身时间的时区更换为指定时区, 时间不变</span></div><div class=\"line\">OffsetDateTime offsetTime2 = time.withOffsetSameLocal(offset);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// offsetTime2 = 2016-10-10T12:59:59+09:00</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"offsetTime2 = \"</span> + offsetTime2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// API与LocalDateTime对象类似</span></div><div class=\"line\">OffsetDateTime offsetTime3 = offsetTime2.withHour(<span class=\"number\">3</span>).plusSeconds(<span class=\"number\">2</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"offsetTime3 = \"</span> + offsetTime3);</div></pre></td></tr></table></figure>\n<p>JDK8还提供了两个非常方便的对象, 让我们来计算时间. <code>Period</code>和<code>Duration</code>. 根据这两个参数非常方便推算出我们想要的时间. <code>Period</code>用于推算年月日, 最低精度到天, <code>Duration</code>用于推算天时分秒, 最低精度到毫秒.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Period period = Period.of(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 3年, 2月, 1天</span></div><div class=\"line\">LocalDateTime now = LocalDateTime.now();</div><div class=\"line\">LocalDateTime periodTime = now.plus(period);</div><div class=\"line\">System.out.println(<span class=\"string\">\"now = \"</span> + now);</div><div class=\"line\">System.out.println(<span class=\"string\">\"periodTime = \"</span> + periodTime);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Durations</span></div><div class=\"line\">Duration duration = Duration.ofSeconds(<span class=\"number\">3</span>, <span class=\"number\">5</span>);</div><div class=\"line\">LocalDateTime durationTime = now.plus(duration);</div><div class=\"line\">System.out.println(<span class=\"string\">\"dutationTime = \"</span> + durationTime);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Better-Java-1-JDK8中有关时间的操作\"><a href=\"#Better-Java-1-JDK8中有关时间的操作\" class=\"headerlink\" title=\"Better Java (1)- JDK8中有关时间的操作\"></a>Better Java (1)- JDK8中有关时间的操作</h2><p>今天读了<a href=\"https://github.com/cxxr/better-java/blob/master/README.zh-cn.md\">Better Java</a>一文, 之前在项目中有关时间的操作基本上都是使用<code>Calendar</code>, 这次学习一下<a href=\"http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html\">JDK8有关时间的操作</a>.</p>\n<p><code>LocalDate</code>操作日期, 如年月日, 不包含时分秒. <code>LocalTime</code>操作时分秒, 不包含年月日. <code>LocalDateTime</code>最为强大, 包含了年月日时分秒. 看内部实现, 其内部包含<code>LocalDate</code>和<code>LocalTime</code>两个对象, 三个类的用法都差不多.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">LocalDateTime timePoint = LocalDateTime.now(); <span class=\"comment\">// 当前日期和时间,</span></div><div class=\"line\">System.out.println(timePoint); <span class=\"comment\">// 输出: 2016-10-18T16:51:14.334</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取年月日时分秒毫秒</span></div><div class=\"line\">System.out.println(timePoint.getYear() + <span class=\"string\">\"年\"</span></div><div class=\"line\">   + timePoint.getMonthValue() + <span class=\"string\">\"月\"</span></div><div class=\"line\">   + timePoint.getDayOfMonth() + <span class=\"string\">\"日, 星期\"</span> + timePoint.getDayOfWeek().getValue() + <span class=\"string\">\",\"</span></div><div class=\"line\">   + timePoint.getHour() + <span class=\"string\">\"时\"</span></div><div class=\"line\">   + timePoint.getMinute() + <span class=\"string\">\"分\"</span></div><div class=\"line\">   + timePoint.getSecond() + <span class=\"string\">\"秒\"</span></div><div class=\"line\">   + timePoint.getNano() + <span class=\"string\">\"毫秒\"</span>);</div></pre></td></tr></table></figure>\n<p>如何生成特定日期的? 可通过 <code>LocalDateTime.of()</code>类方法生成, 或者通过已<code>with</code>及<code>plus</code>开头的实例方法来生成. <code>with</code>开头的实例方法根据参数生成指定日期, <code>plus</code>开头的实例方法根据参数推断日期.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生成一个指定日期: 2015年10月10日0点0分0秒</span></div><div class=\"line\">LocalDateTime timePoint = LocalDateTime.of(<span class=\"number\">2016</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">System.out.println( <span class=\"string\">\"timePoint = \"</span> + timePoint); <span class=\"comment\">// 输出: timePoint = 2016-10-10T00:00</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过plus开头的实例方法, 推断日期, 天数减8, 小时加2, 周减1</span></div><div class=\"line\">LocalDateTime yetAnther = timePoint.plusDays(-<span class=\"number\">8</span>).plusHours(<span class=\"number\">2</span>).plus(-<span class=\"number\">1</span>, ChronoUnit.WEEKS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"yetAnther = \"</span> + yetAnther); <span class=\"comment\">// 输出: yetAnther = 2016-09-25T02:00</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以通过具体逻辑生成指定日期, plus也有如下方法</span></div><div class=\"line\">yetAnther = timePoint.with(temporal</div><div class=\"line\">   -&gt; temporal.plus(-<span class=\"number\">1</span>, ChronoUnit.MONTHS).with(ChronoField.YEAR, <span class=\"number\">2015</span>));</div><div class=\"line\">System.out.println(yetAnther); <span class=\"comment\">// 输出: yetAnther = 2015-09-10T00:00</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>LocalDateTime</code>, <code>LocalDate</code>, <code>LocalTime</code>都是不可变对象, 也就是说通过它们的API得到的时间都是不会改变自己的值, 都是用自身的时间点计算得到的结果. 如代码最后一个方法, 是根据<code>timePoint</code>对象生成的时间<code>2016-10-10 00:00:00</code>生成指定日期的.</p>\n</blockquote>\n<p>有时我们需要不同精度的时间, 比如, 我只需要年月, 不需要日时分秒, 怎么办?</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 转换到所需的时间精度</span></div><div class=\"line\">timePoint = LocalDateTime.of(<span class=\"number\">2016</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">3</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间 : \"</span> + timePoint);</div><div class=\"line\">LocalDateTime truncatedTime = timePoint.truncatedTo(ChronoUnit.DAYS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到天: \"</span> + truncatedTime);</div><div class=\"line\">truncatedTime = timePoint.truncatedTo(ChronoUnit.HOURS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到小时: \"</span> + truncatedTime);</div><div class=\"line\">truncatedTime = timePoint.truncatedTo(ChronoUnit.MINUTES);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到分钟: \"</span> + truncatedTime);</div><div class=\"line\">truncatedTime = timePoint.truncatedTo(ChronoUnit.SECONDS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到秒: \"</span> + truncatedTime);</div><div class=\"line\">truncatedTime = timePoint.truncatedTo(ChronoUnit.NANOS);</div><div class=\"line\">System.out.println(<span class=\"string\">\"时间精度到毫秒: \"</span> + truncatedTime);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>时间精度最大到天, 不能在大于此精度. 否则会抛出异常: <code>UnsupportedTemporalTypeException: Unit is too large to be used for truncation</code></p>\n</blockquote>\n<p>有时我们会对时间做时区处理, 根据本地时间, 推算某个时区的时间, 怎么办? 这里主要用到两个对象: <code>OffsetDateTime</code>和<code>ZoneOffset</code>.</p>\n<p>使用<code>OffsetDateTime</code>获取时区时间, 使用方法与<code>localDateTaime</code>类似. 使用<code>ZoneOffset</code>对象生成时区. 两个对象配合, 即可获取我们想要的时区时间. 下面有两个重要的方法<code>withOffsetSameInstant</code>和<code>withOffsetSameLocal</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">OffsetDateTime time = OffsetDateTime.now(); <span class=\"comment\">// 这个是系统当前时间</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"当前时区时间 = \"</span> + time);</div><div class=\"line\"></div><div class=\"line\">time = OffsetDateTime.of(<span class=\"number\">2016</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">59</span>, <span class=\"number\">59</span>, <span class=\"number\">0</span>, ZoneOffset.of(<span class=\"string\">\"+08:00\"</span>));</div><div class=\"line\">System.out.println(<span class=\"string\">\"指定时区的指定时间 = \"</span> + time);</div><div class=\"line\"></div><div class=\"line\">ZoneOffset offset = ZoneOffset.of(<span class=\"string\">\"+09:00\"</span>); <span class=\"comment\">// 生成指定时区</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用自身时间计算指定时区的时间.</span></div><div class=\"line\">OffsetDateTime offsetTime1 = time.withOffsetSameInstant(offset);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// offsetTime1 = 2016-10-10T13:59:59+09:00</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"offsetTime1 = \"</span> + offsetTime1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将自身时间的时区更换为指定时区, 时间不变</span></div><div class=\"line\">OffsetDateTime offsetTime2 = time.withOffsetSameLocal(offset);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// offsetTime2 = 2016-10-10T12:59:59+09:00</span></div><div class=\"line\">System.out.println(<span class=\"string\">\"offsetTime2 = \"</span> + offsetTime2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// API与LocalDateTime对象类似</span></div><div class=\"line\">OffsetDateTime offsetTime3 = offsetTime2.withHour(<span class=\"number\">3</span>).plusSeconds(<span class=\"number\">2</span>);</div><div class=\"line\">System.out.println(<span class=\"string\">\"offsetTime3 = \"</span> + offsetTime3);</div></pre></td></tr></table></figure>\n<p>JDK8还提供了两个非常方便的对象, 让我们来计算时间. <code>Period</code>和<code>Duration</code>. 根据这两个参数非常方便推算出我们想要的时间. <code>Period</code>用于推算年月日, 最低精度到天, <code>Duration</code>用于推算天时分秒, 最低精度到毫秒.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Period period = Period.of(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 3年, 2月, 1天</span></div><div class=\"line\">LocalDateTime now = LocalDateTime.now();</div><div class=\"line\">LocalDateTime periodTime = now.plus(period);</div><div class=\"line\">System.out.println(<span class=\"string\">\"now = \"</span> + now);</div><div class=\"line\">System.out.println(<span class=\"string\">\"periodTime = \"</span> + periodTime);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Durations</span></div><div class=\"line\">Duration duration = Duration.ofSeconds(<span class=\"number\">3</span>, <span class=\"number\">5</span>);</div><div class=\"line\">LocalDateTime durationTime = now.plus(duration);</div><div class=\"line\">System.out.println(<span class=\"string\">\"dutationTime = \"</span> + durationTime);</div></pre></td></tr></table></figure>\n"},{"title":"网站优化","date":"2016-10-17T05:43:45.000Z","_content":"\n## GithubPage上hexo的优化\n\n建站后发现网站访问奇慢无比, 个人无法忍受, 搜集各种优化方法, 总结一下.\n\n1. js, css, image 压缩. 此方法最为实用, 分分钟将hexo生成的代码体积减小. 加快客户端下载. 本人使用`gulp`, 配置如下, 仅供参考, 具体方法可百度`gulp`\n\n    ```js\n    var gulp = require('gulp'),\n        uglify = require('gulp-uglify'),\n        rename = require('gulp-rename'),\n        cssmin = require('gulp-minify-css'),\n        imagemin = require('gulp-imagemin');\n\n    //JS压缩\n    gulp.task('uglify', function() {\n        return gulp.src('./public/js/src/*.js')\n            .pipe(uglify())\n            .pipe(gulp.dest('././public/js/src/'));\n    });\n\n    //CSS压缩\n    gulp.task('cssmin', function() {\n        return gulp.src('./public/css/main.css')\n            .pipe(cssmin())\n            .pipe(gulp.dest('./public/css/'));\n    });\n    //图片压缩\n    gulp.task('images', function() {\n        gulp.src('./public/images/*.*')\n            .pipe(imagemin({\n                progressive: false\n            }))\n            .pipe(gulp.dest('././public/images/'));\n    });\n\n    gulp.task('build', ['uglify', 'cssmin', 'images']);\n    ```\n\n2. `next`主题第三方库加载,  具体可参考[next的进阶](http://theme-next.iissnan.com/advanced-settings.html), 这点也非常重要.\n3. DNS优化, 这个比较曲折, 先是使用万网的DNS, 所有又使用DNSPod的DNS, 最后又迁移到万网的DNS. 目前使用的是万网的DNS解析. 使用DNSPod是看上了DNSPod的免费cdn, 但不知为什么, PC可以解析域名, 到移动终端上却无法解析. 最后又迁移到万网了. 最后如果不差钱, 你可以买阿里云的`CDN`, 反正我只能看看......\n4. 木有了, 因为使用的GithubPage, 我感觉能做的就这些了, 如果有个人的服务器, 还可以做很多优化, 如`gzip`\n\n\n","source":"_posts/hexo-optimization.md","raw":"---\ntitle: 网站优化\ndate: 2016-10-17 13:43:45\ntags: hexo\ncategories: 杂谈\n---\n\n## GithubPage上hexo的优化\n\n建站后发现网站访问奇慢无比, 个人无法忍受, 搜集各种优化方法, 总结一下.\n\n1. js, css, image 压缩. 此方法最为实用, 分分钟将hexo生成的代码体积减小. 加快客户端下载. 本人使用`gulp`, 配置如下, 仅供参考, 具体方法可百度`gulp`\n\n    ```js\n    var gulp = require('gulp'),\n        uglify = require('gulp-uglify'),\n        rename = require('gulp-rename'),\n        cssmin = require('gulp-minify-css'),\n        imagemin = require('gulp-imagemin');\n\n    //JS压缩\n    gulp.task('uglify', function() {\n        return gulp.src('./public/js/src/*.js')\n            .pipe(uglify())\n            .pipe(gulp.dest('././public/js/src/'));\n    });\n\n    //CSS压缩\n    gulp.task('cssmin', function() {\n        return gulp.src('./public/css/main.css')\n            .pipe(cssmin())\n            .pipe(gulp.dest('./public/css/'));\n    });\n    //图片压缩\n    gulp.task('images', function() {\n        gulp.src('./public/images/*.*')\n            .pipe(imagemin({\n                progressive: false\n            }))\n            .pipe(gulp.dest('././public/images/'));\n    });\n\n    gulp.task('build', ['uglify', 'cssmin', 'images']);\n    ```\n\n2. `next`主题第三方库加载,  具体可参考[next的进阶](http://theme-next.iissnan.com/advanced-settings.html), 这点也非常重要.\n3. DNS优化, 这个比较曲折, 先是使用万网的DNS, 所有又使用DNSPod的DNS, 最后又迁移到万网的DNS. 目前使用的是万网的DNS解析. 使用DNSPod是看上了DNSPod的免费cdn, 但不知为什么, PC可以解析域名, 到移动终端上却无法解析. 最后又迁移到万网了. 最后如果不差钱, 你可以买阿里云的`CDN`, 反正我只能看看......\n4. 木有了, 因为使用的GithubPage, 我感觉能做的就这些了, 如果有个人的服务器, 还可以做很多优化, 如`gzip`\n\n\n","slug":"hexo-optimization","published":1,"updated":"2016-12-31T09:29:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfbhn6b0007p7tliw3q5k48","content":"<h2 id=\"GithubPage上hexo的优化\"><a href=\"#GithubPage上hexo的优化\" class=\"headerlink\" title=\"GithubPage上hexo的优化\"></a>GithubPage上hexo的优化</h2><p>建站后发现网站访问奇慢无比, 个人无法忍受, 搜集各种优化方法, 总结一下.</p>\n<ol>\n<li><p>js, css, image 压缩. 此方法最为实用, 分分钟将hexo生成的代码体积减小. 加快客户端下载. 本人使用<code>gulp</code>, 配置如下, 仅供参考, 具体方法可百度<code>gulp</code></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">    cssmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>),</div><div class=\"line\">    imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//JS压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'uglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/js/src/*.js'</span>)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/js/src/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//CSS压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'cssmin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/css/main.css'</span>)</div><div class=\"line\">        .pipe(cssmin())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public/css/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//图片压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./public/images/*.*'</span>)</div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            <span class=\"attr\">progressive</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/images/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'uglify'</span>, <span class=\"string\">'cssmin'</span>, <span class=\"string\">'images'</span>]);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>next</code>主题第三方库加载,  具体可参考<a href=\"http://theme-next.iissnan.com/advanced-settings.html\" target=\"_blank\" rel=\"external\">next的进阶</a>, 这点也非常重要.</p>\n</li>\n<li>DNS优化, 这个比较曲折, 先是使用万网的DNS, 所有又使用DNSPod的DNS, 最后又迁移到万网的DNS. 目前使用的是万网的DNS解析. 使用DNSPod是看上了DNSPod的免费cdn, 但不知为什么, PC可以解析域名, 到移动终端上却无法解析. 最后又迁移到万网了. 最后如果不差钱, 你可以买阿里云的<code>CDN</code>, 反正我只能看看……</li>\n<li>木有了, 因为使用的GithubPage, 我感觉能做的就这些了, 如果有个人的服务器, 还可以做很多优化, 如<code>gzip</code></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"GithubPage上hexo的优化\"><a href=\"#GithubPage上hexo的优化\" class=\"headerlink\" title=\"GithubPage上hexo的优化\"></a>GithubPage上hexo的优化</h2><p>建站后发现网站访问奇慢无比, 个人无法忍受, 搜集各种优化方法, 总结一下.</p>\n<ol>\n<li><p>js, css, image 压缩. 此方法最为实用, 分分钟将hexo生成的代码体积减小. 加快客户端下载. 本人使用<code>gulp</code>, 配置如下, 仅供参考, 具体方法可百度<code>gulp</code></p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>),</div><div class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>),</div><div class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-rename'</span>),</div><div class=\"line\">    cssmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>),</div><div class=\"line\">    imagemin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-imagemin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//JS压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'uglify'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/js/src/*.js'</span>)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/js/src/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//CSS压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'cssmin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/css/main.css'</span>)</div><div class=\"line\">        .pipe(cssmin())</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public/css/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//图片压缩</span></div><div class=\"line\">gulp.task(<span class=\"string\">'images'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    gulp.src(<span class=\"string\">'./public/images/*.*'</span>)</div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            <span class=\"attr\">progressive</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;))</div><div class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'././public/images/'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(<span class=\"string\">'build'</span>, [<span class=\"string\">'uglify'</span>, <span class=\"string\">'cssmin'</span>, <span class=\"string\">'images'</span>]);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>next</code>主题第三方库加载,  具体可参考<a href=\"http://theme-next.iissnan.com/advanced-settings.html\">next的进阶</a>, 这点也非常重要.</p>\n</li>\n<li>DNS优化, 这个比较曲折, 先是使用万网的DNS, 所有又使用DNSPod的DNS, 最后又迁移到万网的DNS. 目前使用的是万网的DNS解析. 使用DNSPod是看上了DNSPod的免费cdn, 但不知为什么, PC可以解析域名, 到移动终端上却无法解析. 最后又迁移到万网了. 最后如果不差钱, 你可以买阿里云的<code>CDN</code>, 反正我只能看看……</li>\n<li>木有了, 因为使用的GithubPage, 我感觉能做的就这些了, 如果有个人的服务器, 还可以做很多优化, 如<code>gzip</code></li>\n</ol>\n"},{"title":"网站开通","date":"2016-10-16T00:07:18.000Z","comments":0,"_content":"\n## 个人网站开通\n\n`fuxiao86.com`前几个月申请成功后, 一直没有使用, 今天利用周天时间, 使用`hexo`+`Github`把自己的静态网站搭建起来.\n\n`hexo`的使用教程网上有很多, 我这里就不再重复了. 一路搭建基本没有遇到什么坑. 这里提一下`hexo`我用的`next`主题, 有关`next`主题配置, 可以访问[next网站](http://theme-next.iissnan.com/)参考.\n\n\n","source":"_posts/first.md","raw":"---\ntitle: 网站开通\ndate: 2016-10-16 08:07:18\ntags: hexo\ncategories: 杂谈\ncomments: false\n---\n\n## 个人网站开通\n\n`fuxiao86.com`前几个月申请成功后, 一直没有使用, 今天利用周天时间, 使用`hexo`+`Github`把自己的静态网站搭建起来.\n\n`hexo`的使用教程网上有很多, 我这里就不再重复了. 一路搭建基本没有遇到什么坑. 这里提一下`hexo`我用的`next`主题, 有关`next`主题配置, 可以访问[next网站](http://theme-next.iissnan.com/)参考.\n\n\n","slug":"first","published":1,"updated":"2016-12-31T09:29:59.000Z","layout":"post","photos":[],"link":"","_id":"cizfbhn6d0008p7tl5imga2ge","content":"<h2 id=\"个人网站开通\"><a href=\"#个人网站开通\" class=\"headerlink\" title=\"个人网站开通\"></a>个人网站开通</h2><p><code>fuxiao86.com</code>前几个月申请成功后, 一直没有使用, 今天利用周天时间, 使用<code>hexo</code>+<code>Github</code>把自己的静态网站搭建起来.</p>\n<p><code>hexo</code>的使用教程网上有很多, 我这里就不再重复了. 一路搭建基本没有遇到什么坑. 这里提一下<code>hexo</code>我用的<code>next</code>主题, 有关<code>next</code>主题配置, 可以访问<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">next网站</a>参考.</p>\n","excerpt":"","more":"<h2 id=\"个人网站开通\"><a href=\"#个人网站开通\" class=\"headerlink\" title=\"个人网站开通\"></a>个人网站开通</h2><p><code>fuxiao86.com</code>前几个月申请成功后, 一直没有使用, 今天利用周天时间, 使用<code>hexo</code>+<code>Github</code>把自己的静态网站搭建起来.</p>\n<p><code>hexo</code>的使用教程网上有很多, 我这里就不再重复了. 一路搭建基本没有遇到什么坑. 这里提一下<code>hexo</code>我用的<code>next</code>主题, 有关<code>next</code>主题配置, 可以访问<a href=\"http://theme-next.iissnan.com/\">next网站</a>参考.</p>\n"},{"title":"2017年的第一天, 给自己的网站加个\"S\"","date":"2016-12-31T16:28:24.000Z","_content":"\n## 2017年的第一天, 给自己的网站加个\"S\"\n\n* 苹果从2017年1月1日起强制新提交的App使用https请求\n* 很多站点已全站使用https\n* ...\n\nhttps是以后的趋势, 以前我的站点是挂在Github上的, 所以没办法给站点加这个\"s\", 2016年的最后一天, 下了狠心, 买了腾讯云的虚拟主机(不要问我为啥不用阿里云, 因为腾讯云便宜...). 顺便就给站点加个\"s\"吧. \n\n给站点加\"s\"的关键点是申请证书, 目前申请免费证书的方法很多.\n\n* 阿里云的个人免费证书, 赛门铁克(Symantec)签发, 支持顶级域名(xx.com), 1年有效期\n* 腾讯云的个人免费证书, 亚洲诚信(TrustAsia)签发, 不支持顶级域名(xx.com), 只支持一级域名(www.xx.com), 1年有效期\n* Let’s Encrypt 申请, 此种方式最为流行. 3个月有效期(可通过定时脚本, 自动重新申请).\n\n\n开始我申请的是腾讯云的证书, 绑定域名\"www.fuxiao86.com\", 所以已\"fuxiao86.com\"访问则会提示非安全(当然你可以使用`nginx`强制跳转). 所有使用`Let's Encrypt`, 在虚拟机上折腾了好一阵, 腾讯云的`git clone`速度慢的要死, 最终放弃. 在阿里云上重新申请, 申请完毕后, 在虚拟主机上部署. 终于这个\"s\"加上去了.\n\n部署中没有什么难度. 比较纠结的是域名的跳转问题:\n\n1. `http`强制跳转`https`\n2. `fuxiao86.com`强制跳转`www.fuxiao86.com`\n\n这两个问题, 需要一起处理, `google`了半天, 具有参考价值的是nginx官网的[一篇文章](http://nginx.org/en/docs/http/converting_rewrite_rules.html). 很多博客上的参考示例都是nginx标注错误的配置方法. 参考nginx的这篇文章, 我的配置大致是这样子的:\n\n```sh\nserver {\n   listen 80;\n   server_name fuxiao86.com;\n   return 301 https://www.$host$request_uri;\n}\n\nserver {\n   listen 80;\n   server_name www.fuxiao86.com;\n   return 301 https://$host$request_uri;\n}\n```\n\n上面两个`server`的配置, 目的是\n\n1. 将`http://fuxiao86.com`跳转至`https://www.fuxiao86.com`, \n2. 将`http://www.fuxiao86.com`跳转至`https://www.fuxiao86.com`.\n\n还有一个`https://fuxiao86.com`跳转至`https://www.fuxiao86.com`的问题没有解决.\n这个问题我没有查到好的办法. 也是利用上面的原理. 如下:\n\n```sh\n    server {\n\n        server_name  fuxiao86.com;\n        listen       443 ssl;\n\n        ssl_certificate cert/fuxiao86.com.pem;\n        ssl_certificate_key cert/fuxiao86.com.key;\n        ssl_session_timeout 5m;\n        ssl_session_cache shared:SSL:50m;\n        ssl_session_tickets off;\n        \n        ......\n\n        return 301 https://www.$host$request_uri;\n    }\n```\n\n至此, 我的两个问题算是解决了, 个人觉得不完美. 如果你有什么好的配置方法, 请一定要告诉我. 我的邮箱: fuxiao86@163.com.\n\n\n\n\n","source":"_posts/https.md","raw":"---\ntitle: 2017年的第一天, 给自己的网站加个\"S\"\ndate: 2017-01-01 00:28:24\ntags: https\ncategories: Nginx\n---\n\n## 2017年的第一天, 给自己的网站加个\"S\"\n\n* 苹果从2017年1月1日起强制新提交的App使用https请求\n* 很多站点已全站使用https\n* ...\n\nhttps是以后的趋势, 以前我的站点是挂在Github上的, 所以没办法给站点加这个\"s\", 2016年的最后一天, 下了狠心, 买了腾讯云的虚拟主机(不要问我为啥不用阿里云, 因为腾讯云便宜...). 顺便就给站点加个\"s\"吧. \n\n给站点加\"s\"的关键点是申请证书, 目前申请免费证书的方法很多.\n\n* 阿里云的个人免费证书, 赛门铁克(Symantec)签发, 支持顶级域名(xx.com), 1年有效期\n* 腾讯云的个人免费证书, 亚洲诚信(TrustAsia)签发, 不支持顶级域名(xx.com), 只支持一级域名(www.xx.com), 1年有效期\n* Let’s Encrypt 申请, 此种方式最为流行. 3个月有效期(可通过定时脚本, 自动重新申请).\n\n\n开始我申请的是腾讯云的证书, 绑定域名\"www.fuxiao86.com\", 所以已\"fuxiao86.com\"访问则会提示非安全(当然你可以使用`nginx`强制跳转). 所有使用`Let's Encrypt`, 在虚拟机上折腾了好一阵, 腾讯云的`git clone`速度慢的要死, 最终放弃. 在阿里云上重新申请, 申请完毕后, 在虚拟主机上部署. 终于这个\"s\"加上去了.\n\n部署中没有什么难度. 比较纠结的是域名的跳转问题:\n\n1. `http`强制跳转`https`\n2. `fuxiao86.com`强制跳转`www.fuxiao86.com`\n\n这两个问题, 需要一起处理, `google`了半天, 具有参考价值的是nginx官网的[一篇文章](http://nginx.org/en/docs/http/converting_rewrite_rules.html). 很多博客上的参考示例都是nginx标注错误的配置方法. 参考nginx的这篇文章, 我的配置大致是这样子的:\n\n```sh\nserver {\n   listen 80;\n   server_name fuxiao86.com;\n   return 301 https://www.$host$request_uri;\n}\n\nserver {\n   listen 80;\n   server_name www.fuxiao86.com;\n   return 301 https://$host$request_uri;\n}\n```\n\n上面两个`server`的配置, 目的是\n\n1. 将`http://fuxiao86.com`跳转至`https://www.fuxiao86.com`, \n2. 将`http://www.fuxiao86.com`跳转至`https://www.fuxiao86.com`.\n\n还有一个`https://fuxiao86.com`跳转至`https://www.fuxiao86.com`的问题没有解决.\n这个问题我没有查到好的办法. 也是利用上面的原理. 如下:\n\n```sh\n    server {\n\n        server_name  fuxiao86.com;\n        listen       443 ssl;\n\n        ssl_certificate cert/fuxiao86.com.pem;\n        ssl_certificate_key cert/fuxiao86.com.key;\n        ssl_session_timeout 5m;\n        ssl_session_cache shared:SSL:50m;\n        ssl_session_tickets off;\n        \n        ......\n\n        return 301 https://www.$host$request_uri;\n    }\n```\n\n至此, 我的两个问题算是解决了, 个人觉得不完美. 如果你有什么好的配置方法, 请一定要告诉我. 我的邮箱: fuxiao86@163.com.\n\n\n\n\n","slug":"https","published":1,"updated":"2016-12-31T17:26:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizfbhn6f000cp7tle5qx63ym","content":"<h2 id=\"2017年的第一天-给自己的网站加个”S”\"><a href=\"#2017年的第一天-给自己的网站加个”S”\" class=\"headerlink\" title=\"2017年的第一天, 给自己的网站加个”S”\"></a>2017年的第一天, 给自己的网站加个”S”</h2><ul>\n<li>苹果从2017年1月1日起强制新提交的App使用https请求</li>\n<li>很多站点已全站使用https</li>\n<li>…</li>\n</ul>\n<p>https是以后的趋势, 以前我的站点是挂在Github上的, 所以没办法给站点加这个”s”, 2016年的最后一天, 下了狠心, 买了腾讯云的虚拟主机(不要问我为啥不用阿里云, 因为腾讯云便宜…). 顺便就给站点加个”s”吧. </p>\n<p>给站点加”s”的关键点是申请证书, 目前申请免费证书的方法很多.</p>\n<ul>\n<li>阿里云的个人免费证书, 赛门铁克(Symantec)签发, 支持顶级域名(xx.com), 1年有效期</li>\n<li>腾讯云的个人免费证书, 亚洲诚信(TrustAsia)签发, 不支持顶级域名(xx.com), 只支持一级域名(www.xx.com), 1年有效期</li>\n<li>Let’s Encrypt 申请, 此种方式最为流行. 3个月有效期(可通过定时脚本, 自动重新申请).</li>\n</ul>\n<p>开始我申请的是腾讯云的证书, 绑定域名”www.fuxiao86.com”, 所以已”fuxiao86.com”访问则会提示非安全(当然你可以使用<code>nginx</code>强制跳转). 所有使用<code>Let&#39;s Encrypt</code>, 在虚拟机上折腾了好一阵, 腾讯云的<code>git clone</code>速度慢的要死, 最终放弃. 在阿里云上重新申请, 申请完毕后, 在虚拟主机上部署. 终于这个”s”加上去了.</p>\n<p>部署中没有什么难度. 比较纠结的是域名的跳转问题:</p>\n<ol>\n<li><code>http</code>强制跳转<code>https</code></li>\n<li><code>fuxiao86.com</code>强制跳转<code>www.fuxiao86.com</code></li>\n</ol>\n<p>这两个问题, 需要一起处理, <code>google</code>了半天, 具有参考价值的是nginx官网的<a href=\"http://nginx.org/en/docs/http/converting_rewrite_rules.html\" target=\"_blank\" rel=\"external\">一篇文章</a>. 很多博客上的参考示例都是nginx标注错误的配置方法. 参考nginx的这篇文章, 我的配置大致是这样子的:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">   listen 80;</div><div class=\"line\">   server_name fuxiao86.com;</div><div class=\"line\">   <span class=\"built_in\">return</span> 301 https://www.<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">   listen 80;</div><div class=\"line\">   server_name www.fuxiao86.com;</div><div class=\"line\">   <span class=\"built_in\">return</span> 301 https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面两个<code>server</code>的配置, 目的是</p>\n<ol>\n<li>将<code>http://fuxiao86.com</code>跳转至<code>https://www.fuxiao86.com</code>, </li>\n<li>将<code>http://www.fuxiao86.com</code>跳转至<code>https://www.fuxiao86.com</code>.</li>\n</ol>\n<p>还有一个<code>https://fuxiao86.com</code>跳转至<code>https://www.fuxiao86.com</code>的问题没有解决.<br>这个问题我没有查到好的办法. 也是利用上面的原理. 如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">    server_name  fuxiao86.com;</div><div class=\"line\">    listen       443 ssl;</div><div class=\"line\"></div><div class=\"line\">    ssl_certificate cert/fuxiao86.com.pem;</div><div class=\"line\">    ssl_certificate_key cert/fuxiao86.com.key;</div><div class=\"line\">    ssl_session_timeout 5m;</div><div class=\"line\">    ssl_session_cache shared:SSL:50m;</div><div class=\"line\">    ssl_session_tickets off;</div><div class=\"line\">    </div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">return</span> 301 https://www.<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此, 我的两个问题算是解决了, 个人觉得不完美. 如果你有什么好的配置方法, 请一定要告诉我. 我的邮箱: fuxiao86@163.com.</p>\n","excerpt":"","more":"<h2 id=\"2017年的第一天-给自己的网站加个”S”\"><a href=\"#2017年的第一天-给自己的网站加个”S”\" class=\"headerlink\" title=\"2017年的第一天, 给自己的网站加个”S”\"></a>2017年的第一天, 给自己的网站加个”S”</h2><ul>\n<li>苹果从2017年1月1日起强制新提交的App使用https请求</li>\n<li>很多站点已全站使用https</li>\n<li>…</li>\n</ul>\n<p>https是以后的趋势, 以前我的站点是挂在Github上的, 所以没办法给站点加这个”s”, 2016年的最后一天, 下了狠心, 买了腾讯云的虚拟主机(不要问我为啥不用阿里云, 因为腾讯云便宜…). 顺便就给站点加个”s”吧. </p>\n<p>给站点加”s”的关键点是申请证书, 目前申请免费证书的方法很多.</p>\n<ul>\n<li>阿里云的个人免费证书, 赛门铁克(Symantec)签发, 支持顶级域名(xx.com), 1年有效期</li>\n<li>腾讯云的个人免费证书, 亚洲诚信(TrustAsia)签发, 不支持顶级域名(xx.com), 只支持一级域名(www.xx.com), 1年有效期</li>\n<li>Let’s Encrypt 申请, 此种方式最为流行. 3个月有效期(可通过定时脚本, 自动重新申请).</li>\n</ul>\n<p>开始我申请的是腾讯云的证书, 绑定域名”www.fuxiao86.com”, 所以已”fuxiao86.com”访问则会提示非安全(当然你可以使用<code>nginx</code>强制跳转). 所有使用<code>Let&#39;s Encrypt</code>, 在虚拟机上折腾了好一阵, 腾讯云的<code>git clone</code>速度慢的要死, 最终放弃. 在阿里云上重新申请, 申请完毕后, 在虚拟主机上部署. 终于这个”s”加上去了.</p>\n<p>部署中没有什么难度. 比较纠结的是域名的跳转问题:</p>\n<ol>\n<li><code>http</code>强制跳转<code>https</code></li>\n<li><code>fuxiao86.com</code>强制跳转<code>www.fuxiao86.com</code></li>\n</ol>\n<p>这两个问题, 需要一起处理, <code>google</code>了半天, 具有参考价值的是nginx官网的<a href=\"http://nginx.org/en/docs/http/converting_rewrite_rules.html\">一篇文章</a>. 很多博客上的参考示例都是nginx标注错误的配置方法. 参考nginx的这篇文章, 我的配置大致是这样子的:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">   listen 80;</div><div class=\"line\">   server_name fuxiao86.com;</div><div class=\"line\">   <span class=\"built_in\">return</span> 301 https://www.<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">   listen 80;</div><div class=\"line\">   server_name www.fuxiao86.com;</div><div class=\"line\">   <span class=\"built_in\">return</span> 301 https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面两个<code>server</code>的配置, 目的是</p>\n<ol>\n<li>将<code>http://fuxiao86.com</code>跳转至<code>https://www.fuxiao86.com</code>, </li>\n<li>将<code>http://www.fuxiao86.com</code>跳转至<code>https://www.fuxiao86.com</code>.</li>\n</ol>\n<p>还有一个<code>https://fuxiao86.com</code>跳转至<code>https://www.fuxiao86.com</code>的问题没有解决.<br>这个问题我没有查到好的办法. 也是利用上面的原理. 如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">    server_name  fuxiao86.com;</div><div class=\"line\">    listen       443 ssl;</div><div class=\"line\"></div><div class=\"line\">    ssl_certificate cert/fuxiao86.com.pem;</div><div class=\"line\">    ssl_certificate_key cert/fuxiao86.com.key;</div><div class=\"line\">    ssl_session_timeout 5m;</div><div class=\"line\">    ssl_session_cache shared:SSL:50m;</div><div class=\"line\">    ssl_session_tickets off;</div><div class=\"line\">    </div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">return</span> 301 https://www.<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此, 我的两个问题算是解决了, 个人觉得不完美. 如果你有什么好的配置方法, 请一定要告诉我. 我的邮箱: fuxiao86@163.com.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cizfbhn5x0000p7tl6503ri30","category_id":"cizfbhn660004p7tlhgs16w0a","_id":"cizfbhn6g000dp7tl8hc7ivls"},{"post_id":"cizfbhn620002p7tlv9wtb195","category_id":"cizfbhn6e0009p7tlqvqzjysy","_id":"cizfbhn6j000hp7tlhdr05llp"},{"post_id":"cizfbhn690006p7tlrk6prr2d","category_id":"cizfbhn660004p7tlhgs16w0a","_id":"cizfbhn6l000lp7tlwugx0g0l"},{"post_id":"cizfbhn6b0007p7tliw3q5k48","category_id":"cizfbhn6k000ip7tlzwkjp06v","_id":"cizfbhn6m000pp7tlky6tqsrh"},{"post_id":"cizfbhn6d0008p7tl5imga2ge","category_id":"cizfbhn6k000ip7tlzwkjp06v","_id":"cizfbhn6m000tp7tlo6xjpj0g"},{"post_id":"cizfbhn6f000cp7tle5qx63ym","category_id":"cizfbhn6m000qp7tl5sinoqur","_id":"cizfbhn6n000vp7tljj4mpsqi"}],"PostTag":[{"post_id":"cizfbhn5x0000p7tl6503ri30","tag_id":"cizfbhn680005p7tlj6be85el","_id":"cizfbhn6f000bp7tlgdo3dbq6"},{"post_id":"cizfbhn620002p7tlv9wtb195","tag_id":"cizfbhn6f000ap7tl5eby4ppq","_id":"cizfbhn6j000gp7tl4r4qfvap"},{"post_id":"cizfbhn690006p7tlrk6prr2d","tag_id":"cizfbhn680005p7tlj6be85el","_id":"cizfbhn6k000kp7tlpvgtq7ru"},{"post_id":"cizfbhn6b0007p7tliw3q5k48","tag_id":"cizfbhn6k000jp7tlz9sxr24k","_id":"cizfbhn6m000op7tlrvuoodh0"},{"post_id":"cizfbhn6d0008p7tl5imga2ge","tag_id":"cizfbhn6k000jp7tlz9sxr24k","_id":"cizfbhn6m000sp7tl13424tmz"},{"post_id":"cizfbhn6f000cp7tle5qx63ym","tag_id":"cizfbhn6m000rp7tli2xnnjt0","_id":"cizfbhn6n000up7tlk5cy7jgt"}],"Tag":[{"name":"Java","_id":"cizfbhn680005p7tlj6be85el"},{"name":"docker","_id":"cizfbhn6f000ap7tl5eby4ppq"},{"name":"hexo","_id":"cizfbhn6k000jp7tlz9sxr24k"},{"name":"https","_id":"cizfbhn6m000rp7tli2xnnjt0"}]}}